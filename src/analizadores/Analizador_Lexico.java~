/* The following code was generated by JFlex 1.7.0 */

package analizadores;
import java_cup.runtime.*;
import java.io.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>A_lexico.jflex</tt>
 */
public class Analizador_Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 45,  9, 46, 45, 45,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    45,  0,  8,  0,  0,  0,  0, 10,  4,  6, 12, 37, 36,  5,  7, 11, 
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  0, 35,  0,  0, 34, 14, 
     0, 26, 32, 18, 31, 23, 20, 21, 42, 16, 44,  1, 30, 27, 17, 19, 
    38, 43, 22, 25, 33, 28, 29,  1,  1, 41,  1, 39,  0, 40,  0,  3, 
     0, 26, 32, 18, 31, 23, 20, 21, 42, 16, 44,  1, 30, 27, 17, 19, 
    38, 43, 22, 25, 33, 28, 29,  1,  1, 41,  1,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0, 46,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 13, 
     0,  0, 13,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\1"+
    "\1\6\1\1\1\7\1\10\1\11\1\12\15\1\1\13"+
    "\1\14\1\15\1\1\1\16\1\17\1\1\2\0\1\20"+
    "\1\0\1\21\1\0\1\22\1\0\1\23\11\0\1\24"+
    "\7\0\1\25\14\0\1\2\1\0\1\26\5\0\1\27"+
    "\1\0\1\30\4\0\1\31\10\0\1\32\1\0\1\33"+
    "\12\0\1\2\7\0\1\34\2\0\1\35\22\0\1\36"+
    "\20\0\1\37\7\0\1\40\1\0\1\41\1\0\1\42"+
    "\4\0\1\43\1\44\1\45\1\46\3\0\1\47\3\0"+
    "\1\50\1\0\1\51\15\0\1\52\21\0\1\53\1\0"+
    "\1\54\11\0\1\55\3\0\1\56\1\57\2\0\1\60"+
    "\4\0\1\61\1\62\1\63\1\64\1\0\1\65\1\66"+
    "\4\0\1\67\3\0\1\70\2\0\1\71\5\0\1\72"+
    "\1\0\1\73\5\0\1\74\4\0\1\75\1\76\1\0"+
    "\1\77\6\0\1\100\1\101\4\0\1\102\1\103\1\0"+
    "\1\104\1\0\1\105";

  private static int [] zzUnpackAction() {
    int [] result = new int[303];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\353\0\57\0\u011a"+
    "\0\57\0\u0149\0\u0178\0\57\0\57\0\57\0\u01a7\0\u01d6"+
    "\0\u0205\0\u0234\0\u0263\0\u0292\0\u02c1\0\u02f0\0\u031f\0\u034e"+
    "\0\u037d\0\u03ac\0\u03db\0\57\0\57\0\57\0\u040a\0\57"+
    "\0\57\0\u0439\0\u0468\0\215\0\57\0\u0497\0\57\0\u011a"+
    "\0\57\0\u0149\0\57\0\u04c6\0\u04f5\0\u0524\0\u0553\0\u0582"+
    "\0\u05b1\0\u05e0\0\u060f\0\u063e\0\57\0\u066d\0\u069c\0\u06cb"+
    "\0\u06fa\0\u0729\0\u0758\0\u0787\0\57\0\u07b6\0\u07e5\0\u0814"+
    "\0\u0843\0\u0872\0\u08a1\0\u08d0\0\u08ff\0\u092e\0\u095d\0\u098c"+
    "\0\u09bb\0\u0468\0\u09ea\0\u04c6\0\u0a19\0\u0a48\0\u0a77\0\u0aa6"+
    "\0\u0ad5\0\57\0\u0b04\0\u0b33\0\u0b62\0\u0b91\0\u0bc0\0\u0bef"+
    "\0\u0c1e\0\u0c4d\0\u0c7c\0\u0cab\0\u0cda\0\u0d09\0\u0d38\0\u0d67"+
    "\0\u0d96\0\57\0\u0dc5\0\57\0\u0df4\0\u0e23\0\u0e52\0\u0e81"+
    "\0\u0eb0\0\u0edf\0\u0f0e\0\u0f3d\0\u0f6c\0\u0f9b\0\57\0\u0fca"+
    "\0\u0ff9\0\u1028\0\u1057\0\u1086\0\u10b5\0\u10e4\0\57\0\u1113"+
    "\0\u1142\0\57\0\u1171\0\u11a0\0\u11cf\0\u11fe\0\u122d\0\u125c"+
    "\0\u128b\0\u12ba\0\u12e9\0\u1318\0\u1347\0\u1376\0\u13a5\0\u13d4"+
    "\0\u1403\0\u1432\0\u1461\0\u1490\0\57\0\u14bf\0\u14ee\0\u151d"+
    "\0\u154c\0\u157b\0\u15aa\0\u15d9\0\u1608\0\u1637\0\u1666\0\u1695"+
    "\0\u16c4\0\u16f3\0\u1722\0\u1751\0\u1780\0\57\0\u17af\0\u17de"+
    "\0\u180d\0\u183c\0\u186b\0\u189a\0\u18c9\0\57\0\u18f8\0\u1927"+
    "\0\u1956\0\u1985\0\u19b4\0\u19e3\0\u1a12\0\u1a41\0\57\0\u1a70"+
    "\0\57\0\57\0\u1a9f\0\u1ace\0\u1afd\0\57\0\u1b2c\0\u1b5b"+
    "\0\u1b8a\0\57\0\u1bb9\0\57\0\u1be8\0\u1c17\0\u1c46\0\u1c75"+
    "\0\u1ca4\0\u1cd3\0\u1d02\0\u1d31\0\u1d60\0\u1d8f\0\u1dbe\0\u1ded"+
    "\0\u1e1c\0\57\0\u1e4b\0\u1e7a\0\u1ea9\0\u1ed8\0\u1f07\0\u1f36"+
    "\0\u1f65\0\u1f94\0\u1fc3\0\u1ff2\0\u2021\0\u2050\0\u207f\0\u20ae"+
    "\0\u20dd\0\u210c\0\u213b\0\57\0\u216a\0\57\0\u2199\0\u21c8"+
    "\0\u21f7\0\u2226\0\u2255\0\u2284\0\u22b3\0\u22e2\0\u2311\0\57"+
    "\0\u2340\0\u236f\0\u239e\0\57\0\u23cd\0\u23fc\0\u242b\0\57"+
    "\0\u245a\0\u2489\0\u24b8\0\u24e7\0\57\0\57\0\57\0\57"+
    "\0\u2516\0\57\0\57\0\u2545\0\u2574\0\u25a3\0\u25d2\0\57"+
    "\0\u2601\0\u2630\0\u265f\0\57\0\u268e\0\u26bd\0\57\0\u26ec"+
    "\0\u271b\0\u274a\0\u2779\0\u27a8\0\57\0\u27d7\0\57\0\u2806"+
    "\0\u2835\0\u2864\0\u2893\0\u28c2\0\57\0\u28f1\0\u2920\0\u294f"+
    "\0\u297e\0\57\0\57\0\u29ad\0\57\0\u29dc\0\u2a0b\0\u2a3a"+
    "\0\u2a69\0\u2a98\0\u2ac7\0\57\0\57\0\u2af6\0\u2b25\0\u2b54"+
    "\0\u2b83\0\57\0\57\0\u2bb2\0\57\0\u2be1\0\57";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[303];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\4\1\5\1\6\1\7\1\2\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\2\17\1\20"+
    "\1\21\1\22\1\23\1\2\1\24\1\25\2\26\1\27"+
    "\1\30\1\2\1\31\1\2\1\32\1\33\2\2\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\2\1\42\2\2"+
    "\1\11\62\0\1\3\4\0\1\43\50\0\2\44\1\45"+
    "\14\0\10\44\1\0\11\44\4\0\1\44\2\0\4\44"+
    "\7\0\1\46\113\0\1\47\14\0\10\50\1\51\1\0"+
    "\45\50\11\52\1\0\1\53\44\52\13\0\1\54\1\55"+
    "\63\0\1\56\11\0\1\57\46\0\1\60\10\0\1\61"+
    "\45\0\1\62\6\0\1\63\27\0\1\64\22\0\1\65"+
    "\47\0\2\66\11\0\1\67\1\0\1\70\51\0\1\71"+
    "\50\0\1\72\6\0\2\73\22\0\1\74\21\0\2\75"+
    "\6\0\1\76\50\0\1\77\54\0\2\100\2\0\1\101"+
    "\3\0\1\102\2\0\1\103\53\0\1\104\56\0\1\105"+
    "\52\0\1\106\56\0\1\107\6\0\1\110\56\0\1\111"+
    "\26\0\1\112\56\0\1\113\54\0\11\114\1\0\45\114"+
    "\14\55\1\115\42\55\17\0\2\116\1\0\1\117\2\0"+
    "\1\120\77\0\1\121\51\0\1\122\50\0\1\123\44\0"+
    "\1\124\11\0\1\125\51\0\1\126\10\0\1\127\47\0"+
    "\2\130\46\0\1\131\73\0\1\132\41\0\1\133\76\0"+
    "\1\134\4\0\1\135\51\0\1\136\20\0\1\137\102\0"+
    "\1\140\54\0\1\141\70\0\1\142\46\0\1\143\66\0"+
    "\1\144\40\0\1\145\17\0\1\146\66\0\1\147\33\0"+
    "\1\150\33\0\1\151\76\0\1\152\74\0\1\153\43\0"+
    "\1\154\52\0\1\155\5\0\2\156\27\0\1\113\3\0"+
    "\1\157\50\0\13\160\1\0\1\115\42\160\22\0\1\161"+
    "\62\0\1\162\56\0\1\163\56\0\1\164\57\0\1\165"+
    "\32\0\1\166\76\0\1\167\65\0\1\170\53\0\1\171"+
    "\46\0\2\172\41\0\1\173\103\0\2\174\47\0\1\175"+
    "\57\0\1\176\62\0\1\177\52\0\1\200\52\0\2\201"+
    "\16\0\1\202\41\0\1\203\70\0\1\204\43\0\1\205"+
    "\60\0\1\206\56\0\1\207\56\0\1\210\72\0\1\211"+
    "\55\0\1\212\56\0\1\213\47\0\1\214\61\0\1\215"+
    "\53\0\1\216\70\0\1\217\15\0\14\160\1\220\42\160"+
    "\17\0\2\221\65\0\1\222\56\0\1\223\46\0\2\224"+
    "\64\0\1\225\65\0\1\226\10\0\1\227\32\0\1\230"+
    "\55\0\1\231\61\0\1\232\3\0\2\233\1\0\1\234"+
    "\12\0\1\235\33\0\1\236\52\0\2\237\64\0\1\240"+
    "\71\0\1\241\36\0\1\242\62\0\1\243\50\0\2\244"+
    "\72\0\1\245\43\0\1\246\76\0\1\247\43\0\1\250"+
    "\67\0\1\251\45\0\1\252\62\0\1\253\47\0\1\254"+
    "\62\0\1\255\50\0\1\256\63\0\1\257\62\0\1\260"+
    "\37\0\1\261\1\220\65\0\1\262\66\0\1\263\53\0"+
    "\2\264\60\0\1\265\46\0\1\266\65\0\1\267\56\0"+
    "\1\270\65\0\1\271\47\0\1\272\60\0\1\273\41\0"+
    "\2\274\6\0\1\275\46\0\2\276\6\0\1\277\61\0"+
    "\1\300\47\0\1\301\54\0\1\302\54\0\2\303\60\0"+
    "\1\304\70\0\1\305\46\0\1\306\73\0\1\307\43\0"+
    "\1\310\33\0\1\311\76\0\1\312\36\0\1\313\112\0"+
    "\1\314\22\0\1\315\105\0\1\316\46\0\1\317\37\0"+
    "\1\320\102\0\1\321\61\0\1\322\43\0\2\323\74\0"+
    "\1\324\46\0\1\325\57\0\1\326\50\0\1\327\62\0"+
    "\1\330\60\0\1\331\70\0\1\332\43\0\1\333\51\0"+
    "\1\334\67\0\1\335\52\0\1\336\57\0\1\337\61\0"+
    "\1\340\53\0\1\341\61\0\1\342\56\0\1\343\47\0"+
    "\1\344\56\0\1\345\62\0\1\346\51\0\1\347\55\0"+
    "\1\350\54\0\2\351\111\0\1\352\24\0\1\353\63\0"+
    "\1\354\56\0\1\355\53\0\1\356\65\0\1\357\52\0"+
    "\1\360\52\0\1\361\70\0\1\362\43\0\1\363\60\0"+
    "\1\364\65\0\1\365\52\0\1\366\60\0\2\367\63\0"+
    "\1\370\46\0\1\371\56\0\1\372\60\0\2\373\30\0"+
    "\1\374\56\0\1\375\101\0\1\376\53\0\1\377\65\0"+
    "\1\u0100\60\0\1\u0101\63\0\1\u0102\20\0\1\u0103\101\0"+
    "\1\u0104\63\0\1\u0105\42\0\2\u0106\57\0\1\u0107\76\0"+
    "\1\u0108\54\0\1\u0109\46\0\1\u010a\46\0\2\u010b\55\0"+
    "\2\u010c\61\0\1\u010d\54\0\1\u010e\64\0\1\u010f\61\0"+
    "\1\u0110\45\0\1\u0111\64\0\1\u0112\52\0\1\u0113\61\0"+
    "\1\u0114\53\0\1\u0115\54\0\1\u0116\62\0\1\u0117\56\0"+
    "\1\u0118\72\0\1\u0119\53\0\1\u011a\56\0\1\u011b\61\0"+
    "\1\u011c\36\0\1\u011d\67\0\1\u011e\65\0\1\u011f\51\0"+
    "\1\u0120\56\0\1\u0121\50\0\1\u0122\56\0\1\u0123\60\0"+
    "\2\u0124\54\0\1\u0125\61\0\1\u0126\56\0\1\u0127\56\0"+
    "\1\u0128\47\0\1\u0129\71\0\1\u012a\56\0\1\u012b\46\0"+
    "\1\u012c\60\0\2\u012d\44\0\2\u012e\61\0\1\u012f\33\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11280];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\1\1\1\11\2\1\3\11"+
    "\15\1\3\11\1\1\2\11\1\1\2\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\11\0\1\11\7\0"+
    "\1\11\14\0\1\1\1\0\1\1\5\0\1\11\1\0"+
    "\1\1\4\0\1\1\10\0\1\11\1\0\1\11\12\0"+
    "\1\11\7\0\1\11\2\0\1\11\22\0\1\11\20\0"+
    "\1\11\7\0\1\11\1\0\1\1\1\0\1\1\4\0"+
    "\1\11\1\1\2\11\3\0\1\11\3\0\1\11\1\0"+
    "\1\11\15\0\1\11\21\0\1\11\1\0\1\11\11\0"+
    "\1\11\3\0\1\11\1\1\2\0\1\11\4\0\4\11"+
    "\1\0\2\11\4\0\1\11\3\0\1\11\2\0\1\11"+
    "\5\0\1\11\1\0\1\11\5\0\1\11\4\0\2\11"+
    "\1\0\1\11\6\0\2\11\4\0\2\11\1\0\1\11"+
    "\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[303];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public static String errors="";
    public static String inicio="";
    public static String segundo="";
    public static String ends="";


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analizador_Lexico(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Simbolos.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { errors+="<tr><td>"+yytext()+"</td><td>"+(yyline+1)+"</td><td>"+(yycolumn+1)+"</td></tr>";
                    System.out.println("Error Lexico: "+yytext()+ " Linea: "+(yyline+1)+" Columna: "+(yycolumn+1));
            } 
            // fall through
          case 70: break;
          case 2: 
            { return new Symbol(Simbolos.digito, yycolumn, yyline, yytext());
            } 
            // fall through
          case 71: break;
          case 3: 
            { return new Symbol(Simbolos.pare1, yycolumn, yyline, yytext());
            } 
            // fall through
          case 72: break;
          case 4: 
            { return new Symbol(Simbolos.trest, yycolumn, yyline, yytext());
            } 
            // fall through
          case 73: break;
          case 5: 
            { return new Symbol(Simbolos.pare2, yycolumn, yyline, yytext());
            } 
            // fall through
          case 74: break;
          case 6: 
            { /*este es un comentario en java, omitirlos*/
            } 
            // fall through
          case 75: break;
          case 7: 
            { return new Symbol(Simbolos.tdiv, yycolumn, yyline, yytext());
            } 
            // fall through
          case 76: break;
          case 8: 
            { return new Symbol(Simbolos.tmul, yycolumn, yyline, yytext());
            } 
            // fall through
          case 77: break;
          case 9: 
            { return new Symbol(Simbolos.prinzq, yycolumn, yyline, yytext());
            } 
            // fall through
          case 78: break;
          case 10: 
            { return new Symbol(Simbolos.prinder, yycolumn, yyline, yytext());
            } 
            // fall through
          case 79: break;
          case 11: 
            { return new Symbol(Simbolos.puntoYComa, yycolumn, yyline, yytext());
            } 
            // fall through
          case 80: break;
          case 12: 
            { return new Symbol(Simbolos.coma, yycolumn, yyline, yytext());
            } 
            // fall through
          case 81: break;
          case 13: 
            { return new Symbol(Simbolos.tsum, yycolumn, yyline, yytext());
            } 
            // fall through
          case 82: break;
          case 14: 
            { return new Symbol(Simbolos.cor1, yycolumn, yyline, yytext());
            } 
            // fall through
          case 83: break;
          case 15: 
            { return new Symbol(Simbolos.cor2, yycolumn, yyline, yytext());
            } 
            // fall through
          case 84: break;
          case 16: 
            { return new Symbol(Simbolos.id, yycolumn, yyline, yytext());
            } 
            // fall through
          case 85: break;
          case 17: 
            { return new Symbol(Simbolos.simAsignacion, yycolumn, yyline, yytext());
            } 
            // fall through
          case 86: break;
          case 18: 
            { return new Symbol(Simbolos.cadena, yycolumn, yyline, yytext());
            } 
            // fall through
          case 87: break;
          case 19: 
            { return new Symbol(Simbolos.caracter, yycolumn, yyline, yytext());
            } 
            // fall through
          case 88: break;
          case 20: 
            { return new Symbol(Simbolos.pror, yycolumn, yyline, yytext());
            } 
            // fall through
          case 89: break;
          case 21: 
            { return new Symbol(Simbolos.prsi, yycolumn, yyline, yytext());
            } 
            // fall through
          case 90: break;
          case 22: 
            { return new Symbol(Simbolos.comenta, yycolumn, yyline, yytext());
            } 
            // fall through
          case 91: break;
          case 23: 
            { return new Symbol(Simbolos.prnot, yycolumn, yyline, yytext());
            } 
            // fall through
          case 92: break;
          case 24: 
            { return new Symbol(Simbolos.prcon, yycolumn, yyline, yytext());
            } 
            // fall through
          case 93: break;
          case 25: 
            { String inicio =" <!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><link rel=\"stylesheet\" href=\"main4.css\" type=\"text/css\" /<title>Reporte HTML</title></head><body><ul><li class=\"Titulo\">Julio Estuardo Solorzano Sosa</a></li><li class=\"subtitulo\">Proyecto 1 OLC1</li></ul><div>";
                    String segundo= "<table align=\"center\"><tr><td class=\"precio\"  colspan=\"3\">Errores Lexicos</td></tr><tr><td>Lexema</td><td>Linea</td><td>Columna</td></tr>";
                    String ends = "</table><table class=\"precio\" align=\"center\"></div></body></html>";
                    try{
                        PrintWriter writer = new PrintWriter("ReporteLexico.html");
                        writer.println(inicio);
                        writer.println(segundo);
                        writer.println(errors);
                        writer.println(ends);
                        writer.println("");
                        writer.close();
                    }catch (Exception e) {
                       System.out.println("Error");
                    }
                    return new Symbol(Simbolos.prFin, yycolumn, yyline, yytext());
            } 
            // fall through
          case 94: break;
          case 26: 
            { return new Symbol(Simbolos.prand, yycolumn, yyline, yytext());
            } 
            // fall through
          case 95: break;
          case 27: 
            { return new Symbol(Simbolos.tmod, yycolumn, yyline, yytext());
            } 
            // fall through
          case 96: break;
          case 28: 
            { return new Symbol(Simbolos.prcomo, yycolumn, yyline, yytext());
            } 
            // fall through
          case 97: break;
          case 29: 
            { return new Symbol(Simbolos.prosi, yycolumn, yyline, yytext());
            } 
            // fall through
          case 98: break;
          case 30: 
            { return new Symbol(Simbolos.prpara, yycolumn, yyline, yytext());
            } 
            // fall through
          case 99: break;
          case 31: 
            { return new Symbol(Simbolos.BoleanFalso, yycolumn, yyline, yytext());
            } 
            // fall through
          case 100: break;
          case 32: 
            { return new Symbol(Simbolos.prsegun, yycolumn, yyline, yytext());
            } 
            // fall through
          case 101: break;
          case 33: 
            { return new Symbol(Simbolos.tmenor, yycolumn, yyline, yytext());
            } 
            // fall through
          case 102: break;
          case 34: 
            { return new Symbol(Simbolos.tmayor, yycolumn, yyline, yytext());
            } 
            // fall through
          case 103: break;
          case 35: 
            { return new Symbol(Simbolos.prhacer, yycolumn, yyline, yytext());
            } 
            // fall through
          case 104: break;
          case 36: 
            { return new Symbol(Simbolos.prhasta, yycolumn, yyline, yytext());
            } 
            // fall through
          case 105: break;
          case 37: 
            { return new Symbol(Simbolos.comentarioMulti, yycolumn, yyline, yytext());
            } 
            // fall through
          case 106: break;
          case 38: 
            { return new Symbol(Simbolos.prInicio, yycolumn, yyline, yytext());
            } 
            // fall through
          case 107: break;
          case 39: 
            { return new Symbol(Simbolos.prnumero, yycolumn, yyline, yytext());
            } 
            // fall through
          case 108: break;
          case 40: 
            { return new Symbol(Simbolos.prCadena, yycolumn, yyline, yytext());
            } 
            // fall through
          case 109: break;
          case 41: 
            { return new Symbol(Simbolos.prfinsi, yycolumn, yyline, yytext());
            } 
            // fall through
          case 110: break;
          case 42: 
            { return new Symbol(Simbolos.prmetodo, yycolumn, yyline, yytext());
            } 
            // fall through
          case 111: break;
          case 43: 
            { return new Symbol(Simbolos.prfuncion, yycolumn, yyline, yytext());
            } 
            // fall through
          case 112: break;
          case 44: 
            { return new Symbol(Simbolos.prrepetir, yycolumn, yyline, yytext());
            } 
            // fall through
          case 113: break;
          case 45: 
            { return new Symbol(Simbolos.prBoolean, yycolumn, yyline, yytext());
            } 
            // fall through
          case 114: break;
          case 46: 
            { return new Symbol(Simbolos.prIngresar, yycolumn, yyline, yytext());
            } 
            // fall through
          case 115: break;
          case 47: 
            { return new Symbol(Simbolos.primprimir, yycolumn, yyline, yytext());
            } 
            // fall through
          case 116: break;
          case 48: 
            { return new Symbol(Simbolos.prCaracter, yycolumn, yyline, yytext());
            } 
            // fall through
          case 117: break;
          case 49: 
            { return new Symbol(Simbolos.prfinpara, yycolumn, yyline, yytext());
            } 
            // fall through
          case 118: break;
          case 50: 
            { return new Symbol(Simbolos.prretornar, yycolumn, yyline, yytext());
            } 
            // fall through
          case 119: break;
          case 51: 
            { return new Symbol(Simbolos.prentonces, yycolumn, yyline, yytext());
            } 
            // fall through
          case 120: break;
          case 52: 
            { return new Symbol(Simbolos.tigual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 121: break;
          case 53: 
            { return new Symbol(Simbolos.prejecutar, yycolumn, yyline, yytext());
            } 
            // fall through
          case 122: break;
          case 54: 
            { return new Symbol(Simbolos.prmientras, yycolumn, yyline, yytext());
            } 
            // fall through
          case 123: break;
          case 55: 
            { return new Symbol(Simbolos.tpot, yycolumn, yyline, yytext());
            } 
            // fall through
          case 124: break;
          case 56: 
            { return new Symbol(Simbolos.prConValor, yycolumn, yyline, yytext());
            } 
            // fall through
          case 125: break;
          case 57: 
            { return new Symbol(Simbolos.prfinsegun, yycolumn, yyline, yytext());
            } 
            // fall through
          case 126: break;
          case 58: 
            { return new Symbol(Simbolos.BoleanVerdadero, yycolumn, yyline, yytext());
            } 
            // fall through
          case 127: break;
          case 59: 
            { return new Symbol(Simbolos.prhastaque, yycolumn, yyline, yytext());
            } 
            // fall through
          case 128: break;
          case 60: 
            { return new Symbol(Simbolos.prfinmetodo, yycolumn, yyline, yytext());
            } 
            // fall through
          case 129: break;
          case 61: 
            { return new Symbol(Simbolos.princremental, yycolumn, yyline, yytext());
            } 
            // fall through
          case 130: break;
          case 62: 
            { return new Symbol(Simbolos.primprimirln, yycolumn, yyline, yytext());
            } 
            // fall through
          case 131: break;
          case 63: 
            { return new Symbol(Simbolos.prfinfuncion, yycolumn, yyline, yytext());
            } 
            // fall through
          case 132: break;
          case 64: 
            { return new Symbol(Simbolos.prfinmientras, yycolumn, yyline, yytext());
            } 
            // fall through
          case 133: break;
          case 65: 
            { return new Symbol(Simbolos.tdiferente, yycolumn, yyline, yytext());
            } 
            // fall through
          case 134: break;
          case 66: 
            { return new Symbol(Simbolos.tmenorigual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 135: break;
          case 67: 
            { return new Symbol(Simbolos.tmayorigual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 136: break;
          case 68: 
            { return new Symbol(Simbolos.prconparametros, yycolumn, yyline, yytext());
            } 
            // fall through
          case 137: break;
          case 69: 
            { return new Symbol(Simbolos.prdelocontrario, yycolumn, yyline, yytext());
            } 
            // fall through
          case 138: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}

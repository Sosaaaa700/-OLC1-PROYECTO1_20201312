
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.Symbol;
import InterfazGG.ventanaPrincipal;
import java.util.ArrayList;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analizador_sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Analizador_sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analizador_sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador_sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\152\000\002\002\004\000\002\002\005\000\002\003" +
    "\004\000\002\003\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\004" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\026\004\000\002\026\004\000\002" +
    "\026\004\000\002\026\004\000\002\026\006\000\002\026" +
    "\006\000\002\026\006\000\002\026\006\000\002\005\011" +
    "\000\002\005\011\000\002\005\011\000\002\005\011\000" +
    "\002\005\011\000\002\005\011\000\002\007\005\000\002" +
    "\007\003\000\002\010\003\000\002\010\003\000\002\013" +
    "\006\000\002\013\006\000\002\013\006\000\002\013\006" +
    "\000\002\013\006\000\002\013\006\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\007\000\002\004\007\000\002\004\007\000\002\004" +
    "\007\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\003\000\002\011\003\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\015\004\000\002\015\005\000" +
    "\002\015\005\000\002\014\007\000\002\014\006\000\002" +
    "\017\006\000\002\017\007\000\002\016\007\000\002\016" +
    "\011\000\002\016\012\000\002\016\011\000\002\016\012" +
    "\000\002\020\013\000\002\020\012\000\002\020\016\000" +
    "\002\030\012\000\002\030\007\000\002\031\007\000\002" +
    "\031\010\000\002\021\006\000\002\021\006\000\002\021" +
    "\006\000\002\021\005\000\002\021\005\000\002\021\005" +
    "\000\002\022\005\000\002\022\005\000\002\022\005\000" +
    "\002\023\006\000\002\023\012\000\002\024\007\000\002" +
    "\024\013\000\002\027\007\000\002\027\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0109\000\004\015\004\001\002\000\050\003\031\004" +
    "\040\005\052\017\046\020\022\021\042\022\032\031\027" +
    "\033\013\035\010\055\017\060\016\065\044\071\015\076" +
    "\050\100\041\101\036\103\023\106\043\001\002\000\004" +
    "\002\006\001\002\000\004\002\001\001\002\000\076\003" +
    "\ufff3\004\ufff3\005\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3" +
    "\022\ufff3\031\ufff3\033\ufff3\035\ufff3\055\ufff3\057\ufff3\060" +
    "\ufff3\062\ufff3\063\ufff3\064\ufff3\065\ufff3\066\ufff3\070\ufff3" +
    "\071\ufff3\073\ufff3\076\ufff3\077\ufff3\100\ufff3\101\ufff3\102" +
    "\ufff3\103\ufff3\104\ufff3\106\ufff3\001\002\000\004\004\366" +
    "\001\002\000\076\003\ufffc\004\ufffc\005\ufffc\016\ufffc\017" +
    "\ufffc\020\ufffc\021\ufffc\022\ufffc\031\ufffc\033\ufffc\035\ufffc" +
    "\055\ufffc\057\ufffc\060\ufffc\062\ufffc\063\ufffc\064\ufffc\065" +
    "\ufffc\066\ufffc\070\ufffc\071\ufffc\073\ufffc\076\ufffc\077\ufffc" +
    "\100\ufffc\101\ufffc\102\ufffc\103\ufffc\104\ufffc\106\ufffc\001" +
    "\002\000\076\003\ufff7\004\ufff7\005\ufff7\016\ufff7\017\ufff7" +
    "\020\ufff7\021\ufff7\022\ufff7\031\ufff7\033\ufff7\035\ufff7\055" +
    "\ufff7\057\ufff7\060\ufff7\062\ufff7\063\ufff7\064\ufff7\065\ufff7" +
    "\066\ufff7\070\ufff7\071\ufff7\073\ufff7\076\ufff7\077\ufff7\100" +
    "\ufff7\101\ufff7\102\ufff7\103\ufff7\104\ufff7\106\ufff7\001\002" +
    "\000\012\004\061\005\052\031\027\033\013\001\002\000" +
    "\076\003\ufffb\004\ufffb\005\ufffb\016\ufffb\017\ufffb\020\ufffb" +
    "\021\ufffb\022\ufffb\031\ufffb\033\ufffb\035\ufffb\055\ufffb\057" +
    "\ufffb\060\ufffb\062\ufffb\063\ufffb\064\ufffb\065\ufffb\066\ufffb" +
    "\070\ufffb\071\ufffb\073\ufffb\076\ufffb\077\ufffb\100\ufffb\101" +
    "\ufffb\102\ufffb\103\ufffb\104\ufffb\106\ufffb\001\002\000\004" +
    "\004\344\001\002\000\012\004\310\005\052\031\027\033" +
    "\013\001\002\000\014\004\061\005\052\031\027\033\013" +
    "\054\057\001\002\000\076\003\031\004\040\005\052\016" +
    "\ufffe\017\046\020\022\021\042\022\032\031\027\033\013" +
    "\035\010\055\017\057\ufffe\060\016\062\ufffe\063\ufffe\064" +
    "\ufffe\065\044\066\ufffe\070\ufffe\071\015\073\ufffe\076\050" +
    "\077\ufffe\100\041\101\036\102\ufffe\103\023\104\ufffe\106" +
    "\043\001\002\000\004\016\276\001\002\000\010\004\265" +
    "\006\264\031\263\001\002\000\004\004\245\001\002\000" +
    "\076\003\ufff8\004\ufff8\005\ufff8\016\ufff8\017\ufff8\020\ufff8" +
    "\021\ufff8\022\ufff8\031\ufff8\033\ufff8\035\ufff8\055\ufff8\057" +
    "\ufff8\060\ufff8\062\ufff8\063\ufff8\064\ufff8\065\ufff8\066\ufff8" +
    "\070\ufff8\071\ufff8\073\ufff8\076\ufff8\077\ufff8\100\ufff8\101" +
    "\ufff8\102\ufff8\103\ufff8\104\ufff8\106\ufff8\001\002\000\076" +
    "\003\ufffa\004\ufffa\005\ufffa\016\ufffa\017\ufffa\020\ufffa\021" +
    "\ufffa\022\ufffa\031\ufffa\033\ufffa\035\ufffa\055\ufffa\057\ufffa" +
    "\060\ufffa\062\ufffa\063\ufffa\064\ufffa\065\ufffa\066\ufffa\070" +
    "\ufffa\071\ufffa\073\ufffa\076\ufffa\077\ufffa\100\ufffa\101\ufffa" +
    "\102\ufffa\103\ufffa\104\ufffa\106\ufffa\001\002\000\076\003" +
    "\ufff5\004\ufff5\005\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5" +
    "\022\ufff5\031\ufff5\033\ufff5\035\ufff5\055\ufff5\057\ufff5\060" +
    "\ufff5\062\ufff5\063\ufff5\064\ufff5\065\ufff5\066\ufff5\070\ufff5" +
    "\071\ufff5\073\ufff5\076\ufff5\077\ufff5\100\ufff5\101\ufff5\102" +
    "\ufff5\103\ufff5\104\ufff5\106\ufff5\001\002\000\012\004\061" +
    "\005\052\031\027\033\013\001\002\000\006\010\222\014" +
    "\223\001\002\000\050\003\031\004\040\005\052\017\046" +
    "\020\022\021\042\022\032\031\027\033\013\035\010\055" +
    "\017\060\016\065\044\071\015\076\050\100\041\101\036" +
    "\103\023\106\043\001\002\000\076\003\uffda\004\uffda\005" +
    "\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda\031\uffda" +
    "\033\uffda\035\uffda\055\uffda\057\uffda\060\uffda\062\uffda\063" +
    "\uffda\064\uffda\065\uffda\066\uffda\070\uffda\071\uffda\073\uffda" +
    "\076\uffda\077\uffda\100\uffda\101\uffda\102\uffda\103\uffda\104" +
    "\uffda\106\uffda\001\002\000\076\003\ufff1\004\ufff1\005\ufff1" +
    "\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\031\ufff1\033" +
    "\ufff1\035\ufff1\055\ufff1\057\ufff1\060\ufff1\062\ufff1\063\ufff1" +
    "\064\ufff1\065\ufff1\066\ufff1\070\ufff1\071\ufff1\073\ufff1\076" +
    "\ufff1\077\ufff1\100\ufff1\101\ufff1\102\ufff1\103\ufff1\104\ufff1" +
    "\106\ufff1\001\002\000\076\003\ufff4\004\ufff4\005\ufff4\016" +
    "\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\031\ufff4\033\ufff4" +
    "\035\ufff4\055\ufff4\057\ufff4\060\ufff4\062\ufff4\063\ufff4\064" +
    "\ufff4\065\ufff4\066\ufff4\070\ufff4\071\ufff4\073\ufff4\076\ufff4" +
    "\077\ufff4\100\ufff4\101\ufff4\102\ufff4\103\ufff4\104\ufff4\106" +
    "\ufff4\001\002\000\076\003\ufff0\004\ufff0\005\ufff0\016\ufff0" +
    "\017\ufff0\020\ufff0\021\ufff0\022\ufff0\031\ufff0\033\ufff0\035" +
    "\ufff0\055\ufff0\057\ufff0\060\ufff0\062\ufff0\063\ufff0\064\ufff0" +
    "\065\ufff0\066\ufff0\070\ufff0\071\ufff0\073\ufff0\076\ufff0\077" +
    "\ufff0\100\ufff0\101\ufff0\102\ufff0\103\ufff0\104\ufff0\106\ufff0" +
    "\001\002\000\004\004\210\001\002\000\076\003\ufff6\004" +
    "\ufff6\005\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6" +
    "\031\ufff6\033\ufff6\035\ufff6\055\ufff6\057\ufff6\060\ufff6\062" +
    "\ufff6\063\ufff6\064\ufff6\065\ufff6\066\ufff6\070\ufff6\071\ufff6" +
    "\073\ufff6\076\ufff6\077\ufff6\100\ufff6\101\ufff6\102\ufff6\103" +
    "\ufff6\104\ufff6\106\ufff6\001\002\000\116\003\uffc0\004\uffc0" +
    "\005\uffc0\010\uffdb\014\uffdb\016\uffc0\017\uffc0\020\uffc0\021" +
    "\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0" +
    "\030\uffc0\031\uffc0\033\uffc0\035\uffc0\055\uffc0\057\uffc0\060" +
    "\uffc0\062\uffc0\063\uffc0\064\uffc0\065\uffc0\066\uffc0\070\uffc0" +
    "\071\uffc0\073\uffc0\076\uffc0\077\uffc0\100\uffc0\101\uffc0\102" +
    "\uffc0\103\uffc0\104\uffc0\106\uffc0\001\002\000\014\004\061" +
    "\005\052\031\027\033\013\054\057\001\002\000\076\003" +
    "\uffd9\004\uffd9\005\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9" +
    "\022\uffd9\031\uffd9\033\uffd9\035\uffd9\055\uffd9\057\uffd9\060" +
    "\uffd9\062\uffd9\063\uffd9\064\uffd9\065\uffd9\066\uffd9\070\uffd9" +
    "\071\uffd9\073\uffd9\076\uffd9\077\uffd9\100\uffd9\101\uffd9\102" +
    "\uffd9\103\uffd9\104\uffd9\106\uffd9\001\002\000\004\004\160" +
    "\001\002\000\004\004\136\001\002\000\076\003\ufffd\004" +
    "\ufffd\005\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd" +
    "\031\ufffd\033\ufffd\035\ufffd\055\ufffd\057\ufffd\060\ufffd\062" +
    "\ufffd\063\ufffd\064\ufffd\065\ufffd\066\ufffd\070\ufffd\071\ufffd" +
    "\073\ufffd\076\ufffd\077\ufffd\100\ufffd\101\ufffd\102\ufffd\103" +
    "\ufffd\104\ufffd\106\ufffd\001\002\000\010\004\125\006\124" +
    "\031\123\001\002\000\112\003\ufff9\004\ufff9\005\ufff9\016" +
    "\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\023\063\024\066" +
    "\025\075\026\062\027\067\030\070\031\ufff9\033\ufff9\035" +
    "\ufff9\055\ufff9\057\ufff9\060\ufff9\062\ufff9\063\ufff9\064\ufff9" +
    "\065\ufff9\066\ufff9\070\ufff9\071\ufff9\073\ufff9\076\ufff9\077" +
    "\ufff9\100\ufff9\101\ufff9\102\ufff9\103\ufff9\104\ufff9\106\ufff9" +
    "\001\002\000\052\003\031\004\040\005\052\017\046\020" +
    "\022\021\042\022\032\031\027\033\013\035\010\055\017" +
    "\060\016\065\044\071\015\076\050\077\054\100\041\101" +
    "\036\103\023\106\043\001\002\000\076\003\ufff2\004\ufff2" +
    "\005\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\031" +
    "\ufff2\033\ufff2\035\ufff2\055\ufff2\057\ufff2\060\ufff2\062\ufff2" +
    "\063\ufff2\064\ufff2\065\ufff2\066\ufff2\070\ufff2\071\ufff2\073" +
    "\ufff2\076\ufff2\077\ufff2\100\ufff2\101\ufff2\102\ufff2\103\ufff2" +
    "\104\ufff2\106\ufff2\001\002\000\150\003\uffc1\004\uffc1\005" +
    "\uffc1\011\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1" +
    "\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031" +
    "\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\044\uffc1\045\uffc1" +
    "\046\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1\055" +
    "\uffc1\056\uffc1\057\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1" +
    "\064\uffc1\065\uffc1\066\uffc1\070\uffc1\071\uffc1\072\uffc1\073" +
    "\uffc1\074\uffc1\076\uffc1\077\uffc1\100\uffc1\101\uffc1\102\uffc1" +
    "\103\uffc1\104\uffc1\106\uffc1\001\002\000\004\077\117\001" +
    "\002\000\014\004\061\005\052\031\027\033\013\054\057" +
    "\001\002\000\076\003\uffa1\004\uffa1\005\uffa1\016\uffa1\017" +
    "\uffa1\020\uffa1\021\uffa1\022\uffa1\031\uffa1\033\uffa1\035\uffa1" +
    "\055\uffa1\057\uffa1\060\uffa1\062\uffa1\063\uffa1\064\uffa1\065" +
    "\uffa1\066\uffa1\070\uffa1\071\uffa1\073\uffa1\076\uffa1\077\uffa1" +
    "\100\uffa1\101\uffa1\102\uffa1\103\uffa1\104\uffa1\106\uffa1\001" +
    "\002\000\076\003\uffa2\004\uffa2\005\uffa2\016\uffa2\017\uffa2" +
    "\020\uffa2\021\uffa2\022\uffa2\031\uffa2\033\uffa2\035\uffa2\055" +
    "\uffa2\057\uffa2\060\uffa2\062\uffa2\063\uffa2\064\uffa2\065\uffa2" +
    "\066\uffa2\070\uffa2\071\uffa2\073\uffa2\076\uffa2\077\uffa2\100" +
    "\uffa2\101\uffa2\102\uffa2\103\uffa2\104\uffa2\106\uffa2\001\002" +
    "\000\012\004\061\005\052\031\027\033\013\001\002\000" +
    "\132\003\uffa3\004\uffa3\005\uffa3\016\uffa3\017\uffa3\020\uffa3" +
    "\021\uffa3\022\uffa3\023\063\024\066\025\075\026\062\027" +
    "\067\030\070\031\uffa3\033\uffa3\035\uffa3\044\071\045\064" +
    "\046\074\047\072\050\073\051\065\052\076\053\077\055" +
    "\uffa3\057\uffa3\060\uffa3\062\uffa3\063\uffa3\064\uffa3\065\uffa3" +
    "\066\uffa3\070\uffa3\071\uffa3\073\uffa3\076\uffa3\077\uffa3\100" +
    "\uffa3\101\uffa3\102\uffa3\103\uffa3\104\uffa3\106\uffa3\001\002" +
    "\000\150\003\uffc0\004\uffc0\005\uffc0\011\uffc0\016\uffc0\017" +
    "\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0" +
    "\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034" +
    "\uffc0\035\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0" +
    "\051\uffc0\052\uffc0\053\uffc0\055\uffc0\056\uffc0\057\uffc0\060" +
    "\uffc0\061\uffc0\062\uffc0\063\uffc0\064\uffc0\065\uffc0\066\uffc0" +
    "\070\uffc0\071\uffc0\072\uffc0\073\uffc0\074\uffc0\076\uffc0\077" +
    "\uffc0\100\uffc0\101\uffc0\102\uffc0\103\uffc0\104\uffc0\106\uffc0" +
    "\001\002\000\012\004\061\005\052\031\027\033\013\001" +
    "\002\000\012\004\061\005\052\031\027\033\013\001\002" +
    "\000\012\004\061\005\052\031\027\033\013\001\002\000" +
    "\012\004\061\005\052\031\027\033\013\001\002\000\012" +
    "\004\061\005\052\031\027\033\013\001\002\000\012\004" +
    "\061\005\052\031\027\033\013\001\002\000\012\004\061" +
    "\005\052\031\027\033\013\001\002\000\012\004\061\005" +
    "\052\031\027\033\013\001\002\000\012\004\061\005\052" +
    "\031\027\033\013\001\002\000\012\004\061\005\052\031" +
    "\027\033\013\001\002\000\012\004\061\005\052\031\027" +
    "\033\013\001\002\000\012\004\061\005\052\031\027\033" +
    "\013\001\002\000\012\004\061\005\052\031\027\033\013" +
    "\001\002\000\012\004\061\005\052\031\027\033\013\001" +
    "\002\000\116\003\uffb7\004\uffb7\005\uffb7\011\uffb7\016\uffb7" +
    "\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023\063\024\066\025" +
    "\075\026\062\027\067\030\070\031\uffb7\033\uffb7\035\uffb7" +
    "\055\uffb7\056\uffb7\057\uffb7\060\uffb7\062\uffb7\063\uffb7\064" +
    "\uffb7\065\uffb7\066\uffb7\070\uffb7\071\uffb7\073\uffb7\076\uffb7" +
    "\077\uffb7\100\uffb7\101\uffb7\102\uffb7\103\uffb7\104\uffb7\106" +
    "\uffb7\001\002\000\116\003\uffb8\004\uffb8\005\uffb8\011\uffb8" +
    "\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\063\024" +
    "\066\025\075\026\062\027\067\030\070\031\uffb8\033\uffb8" +
    "\035\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8\062\uffb8\063" +
    "\uffb8\064\uffb8\065\uffb8\066\uffb8\070\uffb8\071\uffb8\073\uffb8" +
    "\076\uffb8\077\uffb8\100\uffb8\101\uffb8\102\uffb8\103\uffb8\104" +
    "\uffb8\106\uffb8\001\002\000\150\003\uffc8\004\uffc8\005\uffc8" +
    "\011\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023" +
    "\uffc8\024\uffc8\025\uffc8\026\uffc8\027\067\030\070\031\uffc8" +
    "\032\uffc8\033\uffc8\034\uffc8\035\uffc8\044\uffc8\045\uffc8\046" +
    "\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8\055\uffc8" +
    "\056\uffc8\057\uffc8\060\uffc8\061\uffc8\062\uffc8\063\uffc8\064" +
    "\uffc8\065\uffc8\066\uffc8\070\uffc8\071\uffc8\072\uffc8\073\uffc8" +
    "\074\uffc8\076\uffc8\077\uffc8\100\uffc8\101\uffc8\102\uffc8\103" +
    "\uffc8\104\uffc8\106\uffc8\001\002\000\120\003\uffbd\004\uffbd" +
    "\005\uffbd\011\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022" +
    "\uffbd\023\063\024\066\025\075\026\062\027\067\030\070" +
    "\031\uffbd\032\uffbd\033\uffbd\035\uffbd\055\uffbd\057\uffbd\060" +
    "\uffbd\061\uffbd\062\uffbd\063\uffbd\064\uffbd\065\uffbd\066\uffbd" +
    "\070\uffbd\071\uffbd\073\uffbd\076\uffbd\077\uffbd\100\uffbd\101" +
    "\uffbd\102\uffbd\103\uffbd\104\uffbd\106\uffbd\001\002\000\120" +
    "\003\uffbb\004\uffbb\005\uffbb\011\uffbb\016\uffbb\017\uffbb\020" +
    "\uffbb\021\uffbb\022\uffbb\023\063\024\066\025\075\026\062" +
    "\027\067\030\070\031\uffbb\032\uffbb\033\uffbb\035\uffbb\055" +
    "\uffbb\057\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb\064\uffbb" +
    "\065\uffbb\066\uffbb\070\uffbb\071\uffbb\073\uffbb\076\uffbb\077" +
    "\uffbb\100\uffbb\101\uffbb\102\uffbb\103\uffbb\104\uffbb\106\uffbb" +
    "\001\002\000\120\003\uffbc\004\uffbc\005\uffbc\011\uffbc\016" +
    "\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\063\024\066" +
    "\025\075\026\062\027\067\030\070\031\uffbc\032\uffbc\033" +
    "\uffbc\035\uffbc\055\uffbc\057\uffbc\060\uffbc\061\uffbc\062\uffbc" +
    "\063\uffbc\064\uffbc\065\uffbc\066\uffbc\070\uffbc\071\uffbc\073" +
    "\uffbc\076\uffbc\077\uffbc\100\uffbc\101\uffbc\102\uffbc\103\uffbc" +
    "\104\uffbc\106\uffbc\001\002\000\120\003\uffbf\004\uffbf\005" +
    "\uffbf\011\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf" +
    "\023\063\024\066\025\075\026\062\027\067\030\070\031" +
    "\uffbf\032\uffbf\033\uffbf\035\uffbf\055\uffbf\057\uffbf\060\uffbf" +
    "\061\uffbf\062\uffbf\063\uffbf\064\uffbf\065\uffbf\066\uffbf\070" +
    "\uffbf\071\uffbf\073\uffbf\076\uffbf\077\uffbf\100\uffbf\101\uffbf" +
    "\102\uffbf\103\uffbf\104\uffbf\106\uffbf\001\002\000\150\003" +
    "\uffc5\004\uffc5\005\uffc5\011\uffc5\016\uffc5\017\uffc5\020\uffc5" +
    "\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027" +
    "\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5" +
    "\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5\052" +
    "\uffc5\053\uffc5\055\uffc5\056\uffc5\057\uffc5\060\uffc5\061\uffc5" +
    "\062\uffc5\063\uffc5\064\uffc5\065\uffc5\066\uffc5\070\uffc5\071" +
    "\uffc5\072\uffc5\073\uffc5\074\uffc5\076\uffc5\077\uffc5\100\uffc5" +
    "\101\uffc5\102\uffc5\103\uffc5\104\uffc5\106\uffc5\001\002\000" +
    "\150\003\uffc6\004\uffc6\005\uffc6\011\uffc6\016\uffc6\017\uffc6" +
    "\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026" +
    "\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6" +
    "\035\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051" +
    "\uffc6\052\uffc6\053\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6" +
    "\061\uffc6\062\uffc6\063\uffc6\064\uffc6\065\uffc6\066\uffc6\070" +
    "\uffc6\071\uffc6\072\uffc6\073\uffc6\074\uffc6\076\uffc6\077\uffc6" +
    "\100\uffc6\101\uffc6\102\uffc6\103\uffc6\104\uffc6\106\uffc6\001" +
    "\002\000\150\003\uffc9\004\uffc9\005\uffc9\011\uffc9\016\uffc9" +
    "\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025" +
    "\075\026\062\027\067\030\070\031\uffc9\032\uffc9\033\uffc9" +
    "\034\uffc9\035\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050" +
    "\uffc9\051\uffc9\052\uffc9\053\uffc9\055\uffc9\056\uffc9\057\uffc9" +
    "\060\uffc9\061\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9\066" +
    "\uffc9\070\uffc9\071\uffc9\072\uffc9\073\uffc9\074\uffc9\076\uffc9" +
    "\077\uffc9\100\uffc9\101\uffc9\102\uffc9\103\uffc9\104\uffc9\106" +
    "\uffc9\001\002\000\120\003\uffba\004\uffba\005\uffba\011\uffba" +
    "\016\uffba\017\uffba\020\uffba\021\uffba\022\uffba\023\063\024" +
    "\066\025\075\026\062\027\067\030\070\031\uffba\032\uffba" +
    "\033\uffba\035\uffba\055\uffba\057\uffba\060\uffba\061\uffba\062" +
    "\uffba\063\uffba\064\uffba\065\uffba\066\uffba\070\uffba\071\uffba" +
    "\073\uffba\076\uffba\077\uffba\100\uffba\101\uffba\102\uffba\103" +
    "\uffba\104\uffba\106\uffba\001\002\000\120\003\uffbe\004\uffbe" +
    "\005\uffbe\011\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022" +
    "\uffbe\023\063\024\066\025\075\026\062\027\067\030\070" +
    "\031\uffbe\032\uffbe\033\uffbe\035\uffbe\055\uffbe\057\uffbe\060" +
    "\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe\066\uffbe" +
    "\070\uffbe\071\uffbe\073\uffbe\076\uffbe\077\uffbe\100\uffbe\101" +
    "\uffbe\102\uffbe\103\uffbe\104\uffbe\106\uffbe\001\002\000\150" +
    "\003\uffca\004\uffca\005\uffca\011\uffca\016\uffca\017\uffca\020" +
    "\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025\075\026\062" +
    "\027\067\030\070\031\uffca\032\uffca\033\uffca\034\uffca\035" +
    "\uffca\044\uffca\045\uffca\046\uffca\047\uffca\050\uffca\051\uffca" +
    "\052\uffca\053\uffca\055\uffca\056\uffca\057\uffca\060\uffca\061" +
    "\uffca\062\uffca\063\uffca\064\uffca\065\uffca\066\uffca\070\uffca" +
    "\071\uffca\072\uffca\073\uffca\074\uffca\076\uffca\077\uffca\100" +
    "\uffca\101\uffca\102\uffca\103\uffca\104\uffca\106\uffca\001\002" +
    "\000\150\003\uffc7\004\uffc7\005\uffc7\011\uffc7\016\uffc7\017" +
    "\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7" +
    "\026\uffc7\027\067\030\070\031\uffc7\032\uffc7\033\uffc7\034" +
    "\uffc7\035\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7" +
    "\051\uffc7\052\uffc7\053\uffc7\055\uffc7\056\uffc7\057\uffc7\060" +
    "\uffc7\061\uffc7\062\uffc7\063\uffc7\064\uffc7\065\uffc7\066\uffc7" +
    "\070\uffc7\071\uffc7\072\uffc7\073\uffc7\074\uffc7\076\uffc7\077" +
    "\uffc7\100\uffc7\101\uffc7\102\uffc7\103\uffc7\104\uffc7\106\uffc7" +
    "\001\002\000\116\003\uffb9\004\uffb9\005\uffb9\011\uffb9\016" +
    "\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\063\024\066" +
    "\025\075\026\062\027\067\030\070\031\uffb9\033\uffb9\035" +
    "\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\062\uffb9\063\uffb9" +
    "\064\uffb9\065\uffb9\066\uffb9\070\uffb9\071\uffb9\073\uffb9\076" +
    "\uffb9\077\uffb9\100\uffb9\101\uffb9\102\uffb9\103\uffb9\104\uffb9" +
    "\106\uffb9\001\002\000\014\004\061\005\052\031\027\033" +
    "\013\054\057\001\002\000\076\003\uffa4\004\uffa4\005\uffa4" +
    "\016\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4\031\uffa4\033" +
    "\uffa4\035\uffa4\055\uffa4\057\uffa4\060\uffa4\062\uffa4\063\uffa4" +
    "\064\uffa4\065\uffa4\066\uffa4\070\uffa4\071\uffa4\073\uffa4\076" +
    "\uffa4\077\uffa4\100\uffa4\101\uffa4\102\uffa4\103\uffa4\104\uffa4" +
    "\106\uffa4\001\002\000\076\003\uffa5\004\uffa5\005\uffa5\016" +
    "\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\031\uffa5\033\uffa5" +
    "\035\uffa5\055\uffa5\057\uffa5\060\uffa5\062\uffa5\063\uffa5\064" +
    "\uffa5\065\uffa5\066\uffa5\070\uffa5\071\uffa5\073\uffa5\076\uffa5" +
    "\077\uffa5\100\uffa5\101\uffa5\102\uffa5\103\uffa5\104\uffa5\106" +
    "\uffa5\001\002\000\132\003\uffa6\004\uffa6\005\uffa6\016\uffa6" +
    "\017\uffa6\020\uffa6\021\uffa6\022\uffa6\023\063\024\066\025" +
    "\075\026\062\027\067\030\070\031\uffa6\033\uffa6\035\uffa6" +
    "\044\071\045\064\046\074\047\072\050\073\051\065\052" +
    "\076\053\077\055\uffa6\057\uffa6\060\uffa6\062\uffa6\063\uffa6" +
    "\064\uffa6\065\uffa6\066\uffa6\070\uffa6\071\uffa6\073\uffa6\076" +
    "\uffa6\077\uffa6\100\uffa6\101\uffa6\102\uffa6\103\uffa6\104\uffa6" +
    "\106\uffa6\001\002\000\006\004\131\006\130\001\002\000" +
    "\004\011\127\001\002\000\004\011\126\001\002\000\076" +
    "\003\uffd2\004\uffd2\005\uffd2\016\uffd2\017\uffd2\020\uffd2\021" +
    "\uffd2\022\uffd2\031\uffd2\033\uffd2\035\uffd2\055\uffd2\057\uffd2" +
    "\060\uffd2\062\uffd2\063\uffd2\064\uffd2\065\uffd2\066\uffd2\070" +
    "\uffd2\071\uffd2\073\uffd2\076\uffd2\077\uffd2\100\uffd2\101\uffd2" +
    "\102\uffd2\103\uffd2\104\uffd2\106\uffd2\001\002\000\076\003" +
    "\uffd0\004\uffd0\005\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0" +
    "\022\uffd0\031\uffd0\033\uffd0\035\uffd0\055\uffd0\057\uffd0\060" +
    "\uffd0\062\uffd0\063\uffd0\064\uffd0\065\uffd0\066\uffd0\070\uffd0" +
    "\071\uffd0\073\uffd0\076\uffd0\077\uffd0\100\uffd0\101\uffd0\102" +
    "\uffd0\103\uffd0\104\uffd0\106\uffd0\001\002\000\004\032\134" +
    "\001\002\000\004\032\132\001\002\000\004\011\133\001" +
    "\002\000\076\003\uffce\004\uffce\005\uffce\016\uffce\017\uffce" +
    "\020\uffce\021\uffce\022\uffce\031\uffce\033\uffce\035\uffce\055" +
    "\uffce\057\uffce\060\uffce\062\uffce\063\uffce\064\uffce\065\uffce" +
    "\066\uffce\070\uffce\071\uffce\073\uffce\076\uffce\077\uffce\100" +
    "\uffce\101\uffce\102\uffce\103\uffce\104\uffce\106\uffce\001\002" +
    "\000\004\011\135\001\002\000\076\003\uffcc\004\uffcc\005" +
    "\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\031\uffcc" +
    "\033\uffcc\035\uffcc\055\uffcc\057\uffcc\060\uffcc\062\uffcc\063" +
    "\uffcc\064\uffcc\065\uffcc\066\uffcc\070\uffcc\071\uffcc\073\uffcc" +
    "\076\uffcc\077\uffcc\100\uffcc\101\uffcc\102\uffcc\103\uffcc\104" +
    "\uffcc\106\uffcc\001\002\000\004\056\137\001\002\000\004" +
    "\066\140\001\002\000\004\005\154\001\002\000\010\063" +
    "\143\066\142\070\144\001\002\000\004\005\150\001\002" +
    "\000\004\061\145\001\002\000\076\003\uffa9\004\uffa9\005" +
    "\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9\031\uffa9" +
    "\033\uffa9\035\uffa9\055\uffa9\057\uffa9\060\uffa9\062\uffa9\063" +
    "\uffa9\064\uffa9\065\uffa9\066\uffa9\070\uffa9\071\uffa9\073\uffa9" +
    "\076\uffa9\077\uffa9\100\uffa9\101\uffa9\102\uffa9\103\uffa9\104" +
    "\uffa9\106\uffa9\001\002\000\050\003\031\004\040\005\052" +
    "\017\046\020\022\021\042\022\032\031\027\033\013\035" +
    "\010\055\017\060\016\065\044\071\015\076\050\100\041" +
    "\101\036\103\023\106\043\001\002\000\004\070\147\001" +
    "\002\000\076\003\uffaa\004\uffaa\005\uffaa\016\uffaa\017\uffaa" +
    "\020\uffaa\021\uffaa\022\uffaa\031\uffaa\033\uffaa\035\uffaa\055" +
    "\uffaa\057\uffaa\060\uffaa\062\uffaa\063\uffaa\064\uffaa\065\uffaa" +
    "\066\uffaa\070\uffaa\071\uffaa\073\uffaa\076\uffaa\077\uffaa\100" +
    "\uffaa\101\uffaa\102\uffaa\103\uffaa\104\uffaa\106\uffaa\001\002" +
    "\000\004\067\151\001\002\000\004\061\152\001\002\000" +
    "\050\003\031\004\040\005\052\017\046\020\022\021\042" +
    "\022\032\031\027\033\013\035\010\055\017\060\016\065" +
    "\044\071\015\076\050\100\041\101\036\103\023\106\043" +
    "\001\002\000\010\063\uffa7\066\uffa7\070\uffa7\001\002\000" +
    "\004\067\155\001\002\000\004\061\156\001\002\000\050" +
    "\003\031\004\040\005\052\017\046\020\022\021\042\022" +
    "\032\031\027\033\013\035\010\055\017\060\016\065\044" +
    "\071\015\076\050\100\041\101\036\103\023\106\043\001" +
    "\002\000\010\063\uffa8\066\uffa8\070\uffa8\001\002\000\004" +
    "\031\161\001\002\000\006\004\164\032\163\001\002\000" +
    "\006\014\172\032\173\001\002\000\004\011\171\001\002" +
    "\000\012\037\170\041\167\042\166\043\165\001\002\000" +
    "\006\014\uffe7\032\uffe7\001\002\000\006\014\uffe8\032\uffe8" +
    "\001\002\000\006\014\uffe9\032\uffe9\001\002\000\006\014" +
    "\uffea\032\uffea\001\002\000\076\003\uff99\004\uff99\005\uff99" +
    "\016\uff99\017\uff99\020\uff99\021\uff99\022\uff99\031\uff99\033" +
    "\uff99\035\uff99\055\uff99\057\uff99\060\uff99\062\uff99\063\uff99" +
    "\064\uff99\065\uff99\066\uff99\070\uff99\071\uff99\073\uff99\076" +
    "\uff99\077\uff99\100\uff99\101\uff99\102\uff99\103\uff99\104\uff99" +
    "\106\uff99\001\002\000\004\004\175\001\002\000\004\011" +
    "\174\001\002\000\076\003\uff98\004\uff98\005\uff98\016\uff98" +
    "\017\uff98\020\uff98\021\uff98\022\uff98\031\uff98\033\uff98\035" +
    "\uff98\055\uff98\057\uff98\060\uff98\062\uff98\063\uff98\064\uff98" +
    "\065\uff98\066\uff98\070\uff98\071\uff98\073\uff98\076\uff98\077" +
    "\uff98\100\uff98\101\uff98\102\uff98\103\uff98\104\uff98\106\uff98" +
    "\001\002\000\012\037\201\041\200\042\177\043\176\001" +
    "\002\000\006\014\uffe3\032\uffe3\001\002\000\006\014\uffe4" +
    "\032\uffe4\001\002\000\006\014\uffe5\032\uffe5\001\002\000" +
    "\006\014\uffe6\032\uffe6\001\002\000\004\011\207\001\002" +
    "\000\004\011\206\001\002\000\040\011\205\023\063\024" +
    "\066\025\075\026\062\027\067\030\070\044\071\045\064" +
    "\046\074\047\072\050\073\051\065\052\076\053\077\001" +
    "\002\000\076\003\uffa0\004\uffa0\005\uffa0\016\uffa0\017\uffa0" +
    "\020\uffa0\021\uffa0\022\uffa0\031\uffa0\033\uffa0\035\uffa0\055" +
    "\uffa0\057\uffa0\060\uffa0\062\uffa0\063\uffa0\064\uffa0\065\uffa0" +
    "\066\uffa0\070\uffa0\071\uffa0\073\uffa0\076\uffa0\077\uffa0\100" +
    "\uffa0\101\uffa0\102\uffa0\103\uffa0\104\uffa0\106\uffa0\001\002" +
    "\000\076\003\uff9e\004\uff9e\005\uff9e\016\uff9e\017\uff9e\020" +
    "\uff9e\021\uff9e\022\uff9e\031\uff9e\033\uff9e\035\uff9e\055\uff9e" +
    "\057\uff9e\060\uff9e\062\uff9e\063\uff9e\064\uff9e\065\uff9e\066" +
    "\uff9e\070\uff9e\071\uff9e\073\uff9e\076\uff9e\077\uff9e\100\uff9e" +
    "\101\uff9e\102\uff9e\103\uff9e\104\uff9e\106\uff9e\001\002\000" +
    "\076\003\uff9f\004\uff9f\005\uff9f\016\uff9f\017\uff9f\020\uff9f" +
    "\021\uff9f\022\uff9f\031\uff9f\033\uff9f\035\uff9f\055\uff9f\057" +
    "\uff9f\060\uff9f\062\uff9f\063\uff9f\064\uff9f\065\uff9f\066\uff9f" +
    "\070\uff9f\071\uff9f\073\uff9f\076\uff9f\077\uff9f\100\uff9f\101" +
    "\uff9f\102\uff9f\103\uff9f\104\uff9f\106\uff9f\001\002\000\052" +
    "\003\031\004\040\005\052\017\046\020\022\021\042\022" +
    "\032\031\027\033\013\035\010\055\017\060\016\065\044" +
    "\071\015\076\050\100\041\101\036\103\023\105\211\106" +
    "\043\001\002\000\004\031\214\001\002\000\004\102\213" +
    "\001\002\000\076\003\uff9d\004\uff9d\005\uff9d\016\uff9d\017" +
    "\uff9d\020\uff9d\021\uff9d\022\uff9d\031\uff9d\033\uff9d\035\uff9d" +
    "\055\uff9d\057\uff9d\060\uff9d\062\uff9d\063\uff9d\064\uff9d\065" +
    "\uff9d\066\uff9d\070\uff9d\071\uff9d\073\uff9d\076\uff9d\077\uff9d" +
    "\100\uff9d\101\uff9d\102\uff9d\103\uff9d\104\uff9d\106\uff9d\001" +
    "\002\000\004\004\164\001\002\000\006\014\172\032\216" +
    "\001\002\000\050\003\031\004\040\005\052\017\046\020" +
    "\022\021\042\022\032\031\027\033\013\035\010\055\017" +
    "\060\016\065\044\071\015\076\050\100\041\101\036\103" +
    "\023\106\043\001\002\000\004\102\220\001\002\000\076" +
    "\003\uff9c\004\uff9c\005\uff9c\016\uff9c\017\uff9c\020\uff9c\021" +
    "\uff9c\022\uff9c\031\uff9c\033\uff9c\035\uff9c\055\uff9c\057\uff9c" +
    "\060\uff9c\062\uff9c\063\uff9c\064\uff9c\065\uff9c\066\uff9c\070" +
    "\uff9c\071\uff9c\073\uff9c\076\uff9c\077\uff9c\100\uff9c\101\uff9c" +
    "\102\uff9c\103\uff9c\104\uff9c\106\uff9c\001\002\000\076\003" +
    "\uffef\004\uffef\005\uffef\016\uffef\017\uffef\020\uffef\021\uffef" +
    "\022\uffef\031\uffef\033\uffef\035\uffef\055\uffef\057\uffef\060" +
    "\uffef\062\uffef\063\uffef\064\uffef\065\uffef\066\uffef\070\uffef" +
    "\071\uffef\073\uffef\076\uffef\077\uffef\100\uffef\101\uffef\102" +
    "\uffef\103\uffef\104\uffef\106\uffef\001\002\000\022\004\061" +
    "\005\052\006\226\007\225\012\230\013\231\031\027\033" +
    "\013\001\002\000\004\004\224\001\002\000\010\010\uffdc" +
    "\014\uffdc\036\uffdc\001\002\000\004\011\240\001\002\000" +
    "\004\011\237\001\002\000\004\011\236\001\002\000\004" +
    "\011\235\001\002\000\004\011\234\001\002\000\034\011" +
    "\233\023\063\024\066\025\075\026\062\027\067\030\070" +
    "\044\071\045\064\046\074\047\072\050\073\051\065\001" +
    "\002\000\076\003\uffd7\004\uffd7\005\uffd7\016\uffd7\017\uffd7" +
    "\020\uffd7\021\uffd7\022\uffd7\031\uffd7\033\uffd7\035\uffd7\055" +
    "\uffd7\057\uffd7\060\uffd7\062\uffd7\063\uffd7\064\uffd7\065\uffd7" +
    "\066\uffd7\070\uffd7\071\uffd7\073\uffd7\076\uffd7\077\uffd7\100" +
    "\uffd7\101\uffd7\102\uffd7\103\uffd7\104\uffd7\106\uffd7\001\002" +
    "\000\076\003\uffd3\004\uffd3\005\uffd3\016\uffd3\017\uffd3\020" +
    "\uffd3\021\uffd3\022\uffd3\031\uffd3\033\uffd3\035\uffd3\055\uffd3" +
    "\057\uffd3\060\uffd3\062\uffd3\063\uffd3\064\uffd3\065\uffd3\066" +
    "\uffd3\070\uffd3\071\uffd3\073\uffd3\076\uffd3\077\uffd3\100\uffd3" +
    "\101\uffd3\102\uffd3\103\uffd3\104\uffd3\106\uffd3\001\002\000" +
    "\076\003\uffd5\004\uffd5\005\uffd5\016\uffd5\017\uffd5\020\uffd5" +
    "\021\uffd5\022\uffd5\031\uffd5\033\uffd5\035\uffd5\055\uffd5\057" +
    "\uffd5\060\uffd5\062\uffd5\063\uffd5\064\uffd5\065\uffd5\066\uffd5" +
    "\070\uffd5\071\uffd5\073\uffd5\076\uffd5\077\uffd5\100\uffd5\101" +
    "\uffd5\102\uffd5\103\uffd5\104\uffd5\106\uffd5\001\002\000\076" +
    "\003\uffd6\004\uffd6\005\uffd6\016\uffd6\017\uffd6\020\uffd6\021" +
    "\uffd6\022\uffd6\031\uffd6\033\uffd6\035\uffd6\055\uffd6\057\uffd6" +
    "\060\uffd6\062\uffd6\063\uffd6\064\uffd6\065\uffd6\066\uffd6\070" +
    "\uffd6\071\uffd6\073\uffd6\076\uffd6\077\uffd6\100\uffd6\101\uffd6" +
    "\102\uffd6\103\uffd6\104\uffd6\106\uffd6\001\002\000\076\003" +
    "\uffd8\004\uffd8\005\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8" +
    "\022\uffd8\031\uffd8\033\uffd8\035\uffd8\055\uffd8\057\uffd8\060" +
    "\uffd8\062\uffd8\063\uffd8\064\uffd8\065\uffd8\066\uffd8\070\uffd8" +
    "\071\uffd8\073\uffd8\076\uffd8\077\uffd8\100\uffd8\101\uffd8\102" +
    "\uffd8\103\uffd8\104\uffd8\106\uffd8\001\002\000\076\003\uffd4" +
    "\004\uffd4\005\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022" +
    "\uffd4\031\uffd4\033\uffd4\035\uffd4\055\uffd4\057\uffd4\060\uffd4" +
    "\062\uffd4\063\uffd4\064\uffd4\065\uffd4\066\uffd4\070\uffd4\071" +
    "\uffd4\073\uffd4\076\uffd4\077\uffd4\100\uffd4\101\uffd4\102\uffd4" +
    "\103\uffd4\104\uffd4\106\uffd4\001\002\000\004\032\244\001" +
    "\002\000\034\023\063\024\066\025\075\026\062\027\067" +
    "\030\070\032\243\044\071\045\064\046\074\047\072\050" +
    "\073\051\065\001\002\000\150\003\uffc4\004\uffc4\005\uffc4" +
    "\011\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023" +
    "\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4" +
    "\032\uffc4\033\uffc4\034\uffc4\035\uffc4\044\uffc4\045\uffc4\046" +
    "\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4\055\uffc4" +
    "\056\uffc4\057\uffc4\060\uffc4\061\uffc4\062\uffc4\063\uffc4\064" +
    "\uffc4\065\uffc4\066\uffc4\070\uffc4\071\uffc4\072\uffc4\073\uffc4" +
    "\074\uffc4\076\uffc4\077\uffc4\100\uffc4\101\uffc4\102\uffc4\103" +
    "\uffc4\104\uffc4\106\uffc4\001\002\000\150\003\uffc2\004\uffc2" +
    "\005\uffc2\011\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022" +
    "\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2" +
    "\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\044\uffc2\045" +
    "\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2" +
    "\055\uffc2\056\uffc2\057\uffc2\060\uffc2\061\uffc2\062\uffc2\063" +
    "\uffc2\064\uffc2\065\uffc2\066\uffc2\070\uffc2\071\uffc2\072\uffc2" +
    "\073\uffc2\074\uffc2\076\uffc2\077\uffc2\100\uffc2\101\uffc2\102" +
    "\uffc2\103\uffc2\104\uffc2\106\uffc2\001\002\000\012\037\252" +
    "\041\251\042\250\043\247\001\002\000\052\003\031\004" +
    "\040\005\052\017\046\020\022\021\042\022\032\031\027" +
    "\033\013\035\010\055\017\060\016\065\044\071\015\076" +
    "\050\100\041\101\036\103\023\105\253\106\043\001\002" +
    "\000\052\003\uffeb\004\uffeb\005\uffeb\017\uffeb\020\uffeb\021" +
    "\uffeb\022\uffeb\031\uffeb\033\uffeb\035\uffeb\055\uffeb\060\uffeb" +
    "\065\uffeb\071\uffeb\076\uffeb\100\uffeb\101\uffeb\103\uffeb\105" +
    "\uffeb\106\uffeb\001\002\000\052\003\uffec\004\uffec\005\uffec" +
    "\017\uffec\020\uffec\021\uffec\022\uffec\031\uffec\033\uffec\035" +
    "\uffec\055\uffec\060\uffec\065\uffec\071\uffec\076\uffec\100\uffec" +
    "\101\uffec\103\uffec\105\uffec\106\uffec\001\002\000\052\003" +
    "\uffed\004\uffed\005\uffed\017\uffed\020\uffed\021\uffed\022\uffed" +
    "\031\uffed\033\uffed\035\uffed\055\uffed\060\uffed\065\uffed\071" +
    "\uffed\076\uffed\100\uffed\101\uffed\103\uffed\105\uffed\106\uffed" +
    "\001\002\000\052\003\uffee\004\uffee\005\uffee\017\uffee\020" +
    "\uffee\021\uffee\022\uffee\031\uffee\033\uffee\035\uffee\055\uffee" +
    "\060\uffee\065\uffee\071\uffee\076\uffee\100\uffee\101\uffee\103" +
    "\uffee\105\uffee\106\uffee\001\002\000\004\031\256\001\002" +
    "\000\004\104\255\001\002\000\076\003\uff9b\004\uff9b\005" +
    "\uff9b\016\uff9b\017\uff9b\020\uff9b\021\uff9b\022\uff9b\031\uff9b" +
    "\033\uff9b\035\uff9b\055\uff9b\057\uff9b\060\uff9b\062\uff9b\063" +
    "\uff9b\064\uff9b\065\uff9b\066\uff9b\070\uff9b\071\uff9b\073\uff9b" +
    "\076\uff9b\077\uff9b\100\uff9b\101\uff9b\102\uff9b\103\uff9b\104" +
    "\uff9b\106\uff9b\001\002\000\004\004\164\001\002\000\006" +
    "\014\172\032\260\001\002\000\050\003\031\004\040\005" +
    "\052\017\046\020\022\021\042\022\032\031\027\033\013" +
    "\035\010\055\017\060\016\065\044\071\015\076\050\100" +
    "\041\101\036\103\023\106\043\001\002\000\004\104\262" +
    "\001\002\000\076\003\uff9a\004\uff9a\005\uff9a\016\uff9a\017" +
    "\uff9a\020\uff9a\021\uff9a\022\uff9a\031\uff9a\033\uff9a\035\uff9a" +
    "\055\uff9a\057\uff9a\060\uff9a\062\uff9a\063\uff9a\064\uff9a\065" +
    "\uff9a\066\uff9a\070\uff9a\071\uff9a\073\uff9a\076\uff9a\077\uff9a" +
    "\100\uff9a\101\uff9a\102\uff9a\103\uff9a\104\uff9a\106\uff9a\001" +
    "\002\000\006\004\271\006\270\001\002\000\004\011\267" +
    "\001\002\000\004\011\266\001\002\000\076\003\uffd1\004" +
    "\uffd1\005\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1" +
    "\031\uffd1\033\uffd1\035\uffd1\055\uffd1\057\uffd1\060\uffd1\062" +
    "\uffd1\063\uffd1\064\uffd1\065\uffd1\066\uffd1\070\uffd1\071\uffd1" +
    "\073\uffd1\076\uffd1\077\uffd1\100\uffd1\101\uffd1\102\uffd1\103" +
    "\uffd1\104\uffd1\106\uffd1\001\002\000\076\003\uffcf\004\uffcf" +
    "\005\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\031" +
    "\uffcf\033\uffcf\035\uffcf\055\uffcf\057\uffcf\060\uffcf\062\uffcf" +
    "\063\uffcf\064\uffcf\065\uffcf\066\uffcf\070\uffcf\071\uffcf\073" +
    "\uffcf\076\uffcf\077\uffcf\100\uffcf\101\uffcf\102\uffcf\103\uffcf" +
    "\104\uffcf\106\uffcf\001\002\000\004\032\274\001\002\000" +
    "\004\032\272\001\002\000\004\011\273\001\002\000\076" +
    "\003\uffcd\004\uffcd\005\uffcd\016\uffcd\017\uffcd\020\uffcd\021" +
    "\uffcd\022\uffcd\031\uffcd\033\uffcd\035\uffcd\055\uffcd\057\uffcd" +
    "\060\uffcd\062\uffcd\063\uffcd\064\uffcd\065\uffcd\066\uffcd\070" +
    "\uffcd\071\uffcd\073\uffcd\076\uffcd\077\uffcd\100\uffcd\101\uffcd" +
    "\102\uffcd\103\uffcd\104\uffcd\106\uffcd\001\002\000\004\011" +
    "\275\001\002\000\076\003\uffcb\004\uffcb\005\uffcb\016\uffcb" +
    "\017\uffcb\020\uffcb\021\uffcb\022\uffcb\031\uffcb\033\uffcb\035" +
    "\uffcb\055\uffcb\057\uffcb\060\uffcb\062\uffcb\063\uffcb\064\uffcb" +
    "\065\uffcb\066\uffcb\070\uffcb\071\uffcb\073\uffcb\076\uffcb\077" +
    "\uffcb\100\uffcb\101\uffcb\102\uffcb\103\uffcb\104\uffcb\106\uffcb" +
    "\001\002\000\004\002\000\001\002\000\030\016\uffff\057" +
    "\uffff\062\uffff\063\uffff\064\uffff\066\uffff\070\uffff\073\uffff" +
    "\077\uffff\102\uffff\104\uffff\001\002\000\004\056\302\001" +
    "\002\000\022\023\063\024\066\025\075\026\062\027\067" +
    "\030\070\052\076\053\077\001\002\000\052\003\031\004" +
    "\040\005\052\017\046\020\022\021\042\022\032\031\027" +
    "\033\013\035\010\055\017\057\304\060\016\065\044\071" +
    "\015\076\050\100\041\101\036\103\023\106\043\001\002" +
    "\000\004\057\305\001\002\000\076\003\uffb5\004\uffb5\005" +
    "\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\031\uffb5" +
    "\033\uffb5\035\uffb5\055\uffb5\057\uffb5\060\uffb5\062\uffb5\063" +
    "\uffb5\064\uffb5\065\uffb5\066\uffb5\070\uffb5\071\uffb5\073\uffb5" +
    "\076\uffb5\077\uffb5\100\uffb5\101\uffb5\102\uffb5\103\uffb5\104" +
    "\uffb5\106\uffb5\001\002\000\076\003\uffb6\004\uffb6\005\uffb6" +
    "\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\031\uffb6\033" +
    "\uffb6\035\uffb6\055\uffb6\057\uffb6\060\uffb6\062\uffb6\063\uffb6" +
    "\064\uffb6\065\uffb6\066\uffb6\070\uffb6\071\uffb6\073\uffb6\076" +
    "\uffb6\077\uffb6\100\uffb6\101\uffb6\102\uffb6\103\uffb6\104\uffb6" +
    "\106\uffb6\001\002\000\004\061\332\001\002\000\032\023" +
    "\063\024\066\025\075\026\062\027\067\030\070\044\071" +
    "\045\064\046\074\047\072\050\073\051\065\001\002\000" +
    "\034\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0" +
    "\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0\061" +
    "\311\001\002\000\050\003\031\004\040\005\052\017\046" +
    "\020\022\021\042\022\032\031\027\033\013\035\010\055" +
    "\017\060\016\065\044\071\015\076\050\100\041\101\036" +
    "\103\023\106\043\001\002\000\006\063\314\064\315\001" +
    "\002\000\006\063\323\064\324\001\002\000\050\003\031" +
    "\004\040\005\052\017\046\020\022\021\042\022\032\031" +
    "\027\033\013\035\010\055\017\060\016\065\044\071\015" +
    "\076\050\100\041\101\036\103\023\106\043\001\002\000" +
    "\012\004\061\005\052\031\027\033\013\001\002\000\004" +
    "\061\317\001\002\000\050\003\031\004\040\005\052\017" +
    "\046\020\022\021\042\022\032\031\027\033\013\035\010" +
    "\055\017\060\016\065\044\071\015\076\050\100\041\101" +
    "\036\103\023\106\043\001\002\000\006\063\uffb4\064\uffb4" +
    "\001\002\000\004\062\322\001\002\000\076\003\uffaf\004" +
    "\uffaf\005\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf" +
    "\031\uffaf\033\uffaf\035\uffaf\055\uffaf\057\uffaf\060\uffaf\062" +
    "\uffaf\063\uffaf\064\uffaf\065\uffaf\066\uffaf\070\uffaf\071\uffaf" +
    "\073\uffaf\076\uffaf\077\uffaf\100\uffaf\101\uffaf\102\uffaf\103" +
    "\uffaf\104\uffaf\106\uffaf\001\002\000\050\003\031\004\040" +
    "\005\052\017\046\020\022\021\042\022\032\031\027\033" +
    "\013\035\010\055\017\060\016\065\044\071\015\076\050" +
    "\100\041\101\036\103\023\106\043\001\002\000\012\004" +
    "\061\005\052\031\027\033\013\001\002\000\004\061\326" +
    "\001\002\000\050\003\031\004\040\005\052\017\046\020" +
    "\022\021\042\022\032\031\027\033\013\035\010\055\017" +
    "\060\016\065\044\071\015\076\050\100\041\101\036\103" +
    "\023\106\043\001\002\000\006\063\uffb3\064\uffb3\001\002" +
    "\000\004\062\331\001\002\000\076\003\uffae\004\uffae\005" +
    "\uffae\016\uffae\017\uffae\020\uffae\021\uffae\022\uffae\031\uffae" +
    "\033\uffae\035\uffae\055\uffae\057\uffae\060\uffae\062\uffae\063" +
    "\uffae\064\uffae\065\uffae\066\uffae\070\uffae\071\uffae\073\uffae" +
    "\076\uffae\077\uffae\100\uffae\101\uffae\102\uffae\103\uffae\104" +
    "\uffae\106\uffae\001\002\000\050\003\031\004\040\005\052" +
    "\017\046\020\022\021\042\022\032\031\027\033\013\035" +
    "\010\055\017\060\016\065\044\071\015\076\050\100\041" +
    "\101\036\103\023\106\043\001\002\000\010\062\336\063" +
    "\335\064\315\001\002\000\006\063\341\064\324\001\002" +
    "\000\050\003\031\004\040\005\052\017\046\020\022\021" +
    "\042\022\032\031\027\033\013\035\010\055\017\060\016" +
    "\065\044\071\015\076\050\100\041\101\036\103\023\106" +
    "\043\001\002\000\076\003\uffb2\004\uffb2\005\uffb2\016\uffb2" +
    "\017\uffb2\020\uffb2\021\uffb2\022\uffb2\031\uffb2\033\uffb2\035" +
    "\uffb2\055\uffb2\057\uffb2\060\uffb2\062\uffb2\063\uffb2\064\uffb2" +
    "\065\uffb2\066\uffb2\070\uffb2\071\uffb2\073\uffb2\076\uffb2\077" +
    "\uffb2\100\uffb2\101\uffb2\102\uffb2\103\uffb2\104\uffb2\106\uffb2" +
    "\001\002\000\004\062\340\001\002\000\076\003\uffb1\004" +
    "\uffb1\005\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1" +
    "\031\uffb1\033\uffb1\035\uffb1\055\uffb1\057\uffb1\060\uffb1\062" +
    "\uffb1\063\uffb1\064\uffb1\065\uffb1\066\uffb1\070\uffb1\071\uffb1" +
    "\073\uffb1\076\uffb1\077\uffb1\100\uffb1\101\uffb1\102\uffb1\103" +
    "\uffb1\104\uffb1\106\uffb1\001\002\000\050\003\031\004\040" +
    "\005\052\017\046\020\022\021\042\022\032\031\027\033" +
    "\013\035\010\055\017\060\016\065\044\071\015\076\050" +
    "\100\041\101\036\103\023\106\043\001\002\000\004\062" +
    "\343\001\002\000\076\003\uffb0\004\uffb0\005\uffb0\016\uffb0" +
    "\017\uffb0\020\uffb0\021\uffb0\022\uffb0\031\uffb0\033\uffb0\035" +
    "\uffb0\055\uffb0\057\uffb0\060\uffb0\062\uffb0\063\uffb0\064\uffb0" +
    "\065\uffb0\066\uffb0\070\uffb0\071\uffb0\073\uffb0\076\uffb0\077" +
    "\uffb0\100\uffb0\101\uffb0\102\uffb0\103\uffb0\104\uffb0\106\uffb0" +
    "\001\002\000\004\010\345\001\002\000\012\004\061\005" +
    "\052\031\027\033\013\001\002\000\020\023\063\024\066" +
    "\025\075\026\062\027\067\030\070\072\347\001\002\000" +
    "\012\004\061\005\052\031\027\033\013\001\002\000\022" +
    "\023\063\024\066\025\075\026\062\027\067\030\070\056" +
    "\352\074\351\001\002\000\004\075\356\001\002\000\052" +
    "\003\031\004\040\005\052\017\046\020\022\021\042\022" +
    "\032\031\027\033\013\035\010\055\017\060\016\065\044" +
    "\071\015\073\354\076\050\100\041\101\036\103\023\106" +
    "\043\001\002\000\004\073\355\001\002\000\076\003\uffac" +
    "\004\uffac\005\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022" +
    "\uffac\031\uffac\033\uffac\035\uffac\055\uffac\057\uffac\060\uffac" +
    "\062\uffac\063\uffac\064\uffac\065\uffac\066\uffac\070\uffac\071" +
    "\uffac\073\uffac\076\uffac\077\uffac\100\uffac\101\uffac\102\uffac" +
    "\103\uffac\104\uffac\106\uffac\001\002\000\076\003\uffad\004" +
    "\uffad\005\uffad\016\uffad\017\uffad\020\uffad\021\uffad\022\uffad" +
    "\031\uffad\033\uffad\035\uffad\055\uffad\057\uffad\060\uffad\062" +
    "\uffad\063\uffad\064\uffad\065\uffad\066\uffad\070\uffad\071\uffad" +
    "\073\uffad\076\uffad\077\uffad\100\uffad\101\uffad\102\uffad\103" +
    "\uffad\104\uffad\106\uffad\001\002\000\012\004\061\005\052" +
    "\031\027\033\013\001\002\000\020\023\063\024\066\025" +
    "\075\026\062\027\067\030\070\056\360\001\002\000\050" +
    "\003\031\004\040\005\052\017\046\020\022\021\042\022" +
    "\032\031\027\033\013\035\010\055\017\060\016\065\044" +
    "\071\015\076\050\100\041\101\036\103\023\106\043\001" +
    "\002\000\004\073\362\001\002\000\076\003\uffab\004\uffab" +
    "\005\uffab\016\uffab\017\uffab\020\uffab\021\uffab\022\uffab\031" +
    "\uffab\033\uffab\035\uffab\055\uffab\057\uffab\060\uffab\062\uffab" +
    "\063\uffab\064\uffab\065\uffab\066\uffab\070\uffab\071\uffab\073" +
    "\uffab\076\uffab\077\uffab\100\uffab\101\uffab\102\uffab\103\uffab" +
    "\104\uffab\106\uffab\001\002\000\020\023\063\024\066\025" +
    "\075\026\062\027\067\030\070\034\364\001\002\000\150" +
    "\003\uffc3\004\uffc3\005\uffc3\011\uffc3\016\uffc3\017\uffc3\020" +
    "\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3" +
    "\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035" +
    "\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3" +
    "\052\uffc3\053\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3\061" +
    "\uffc3\062\uffc3\063\uffc3\064\uffc3\065\uffc3\066\uffc3\070\uffc3" +
    "\071\uffc3\072\uffc3\073\uffc3\074\uffc3\076\uffc3\077\uffc3\100" +
    "\uffc3\101\uffc3\102\uffc3\103\uffc3\104\uffc3\106\uffc3\001\002" +
    "\000\006\014\223\036\367\001\002\000\006\014\uffdb\036" +
    "\uffdb\001\002\000\012\037\373\041\372\042\371\043\370" +
    "\001\002\000\004\040\u0105\001\002\000\004\040\u0102\001" +
    "\002\000\004\040\377\001\002\000\004\040\374\001\002" +
    "\000\012\004\061\005\052\031\027\033\013\001\002\000" +
    "\020\011\376\023\063\024\066\025\075\026\062\027\067" +
    "\030\070\001\002\000\076\003\uffe2\004\uffe2\005\uffe2\016" +
    "\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\031\uffe2\033\uffe2" +
    "\035\uffe2\055\uffe2\057\uffe2\060\uffe2\062\uffe2\063\uffe2\064" +
    "\uffe2\065\uffe2\066\uffe2\070\uffe2\071\uffe2\073\uffe2\076\uffe2" +
    "\077\uffe2\100\uffe2\101\uffe2\102\uffe2\103\uffe2\104\uffe2\106" +
    "\uffe2\001\002\000\004\006\u0100\001\002\000\004\011\u0101" +
    "\001\002\000\076\003\uffe1\004\uffe1\005\uffe1\016\uffe1\017" +
    "\uffe1\020\uffe1\021\uffe1\022\uffe1\031\uffe1\033\uffe1\035\uffe1" +
    "\055\uffe1\057\uffe1\060\uffe1\062\uffe1\063\uffe1\064\uffe1\065" +
    "\uffe1\066\uffe1\070\uffe1\071\uffe1\073\uffe1\076\uffe1\077\uffe1" +
    "\100\uffe1\101\uffe1\102\uffe1\103\uffe1\104\uffe1\106\uffe1\001" +
    "\002\000\004\012\u0103\001\002\000\004\011\u0104\001\002" +
    "\000\076\003\uffe0\004\uffe0\005\uffe0\016\uffe0\017\uffe0\020" +
    "\uffe0\021\uffe0\022\uffe0\031\uffe0\033\uffe0\035\uffe0\055\uffe0" +
    "\057\uffe0\060\uffe0\062\uffe0\063\uffe0\064\uffe0\065\uffe0\066" +
    "\uffe0\070\uffe0\071\uffe0\073\uffe0\076\uffe0\077\uffe0\100\uffe0" +
    "\101\uffe0\102\uffe0\103\uffe0\104\uffe0\106\uffe0\001\002\000" +
    "\016\004\061\005\052\007\u0106\013\u0108\031\027\033\013" +
    "\001\002\000\004\011\u010b\001\002\000\004\011\u010a\001" +
    "\002\000\004\011\u0109\001\002\000\076\003\uffde\004\uffde" +
    "\005\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\031" +
    "\uffde\033\uffde\035\uffde\055\uffde\057\uffde\060\uffde\062\uffde" +
    "\063\uffde\064\uffde\065\uffde\066\uffde\070\uffde\071\uffde\073" +
    "\uffde\076\uffde\077\uffde\100\uffde\101\uffde\102\uffde\103\uffde" +
    "\104\uffde\106\uffde\001\002\000\076\003\uffdd\004\uffdd\005" +
    "\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\031\uffdd" +
    "\033\uffdd\035\uffdd\055\uffdd\057\uffdd\060\uffdd\062\uffdd\063" +
    "\uffdd\064\uffdd\065\uffdd\066\uffdd\070\uffdd\071\uffdd\073\uffdd" +
    "\076\uffdd\077\uffdd\100\uffdd\101\uffdd\102\uffdd\103\uffdd\104" +
    "\uffdd\106\uffdd\001\002\000\076\003\uffdf\004\uffdf\005\uffdf" +
    "\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\031\uffdf\033" +
    "\uffdf\035\uffdf\055\uffdf\057\uffdf\060\uffdf\062\uffdf\063\uffdf" +
    "\064\uffdf\065\uffdf\066\uffdf\070\uffdf\071\uffdf\073\uffdf\076" +
    "\uffdf\077\uffdf\100\uffdf\101\uffdf\102\uffdf\103\uffdf\104\uffdf" +
    "\106\uffdf\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0109\000\004\002\004\001\001\000\044\003\020\004" +
    "\034\005\044\006\017\007\027\010\024\011\046\013\010" +
    "\014\023\016\013\020\011\021\036\022\025\023\033\024" +
    "\006\027\050\030\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\364\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\362\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\306\012" +
    "\305\001\001\000\006\011\300\015\277\001\001\000\044" +
    "\003\276\004\034\005\044\006\017\007\027\010\024\011" +
    "\046\013\010\014\023\016\013\020\011\021\036\022\025" +
    "\023\033\024\006\027\050\030\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\241\012" +
    "\240\001\001\000\002\001\001\000\042\004\034\005\044" +
    "\006\220\007\027\010\024\011\046\013\010\014\023\016" +
    "\013\020\011\021\036\022\025\023\033\024\006\027\050" +
    "\030\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\011\203\012\201\015" +
    "\202\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\003\052\004\034\005\044\006\017\007\027" +
    "\010\024\011\046\013\010\014\023\016\013\020\011\021" +
    "\036\022\025\023\033\024\006\027\050\030\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\011\057\012\054\015\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\114\001\001\000\004" +
    "\011\113\001\001\000\004\011\112\001\001\000\004\011" +
    "\111\001\001\000\004\011\110\001\001\000\004\011\107" +
    "\001\001\000\004\011\106\001\001\000\004\011\105\001" +
    "\001\000\004\011\104\001\001\000\004\011\103\001\001" +
    "\000\004\011\102\001\001\000\004\011\101\001\001\000" +
    "\004\011\100\001\001\000\004\011\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\011\121\012\117\015" +
    "\120\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\140\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\003\145\004\034\005\044\006\017\007\027\010\024\011" +
    "\046\013\010\014\023\016\013\020\011\021\036\022\025" +
    "\023\033\024\006\027\050\030\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\003\152\004\034\005\044\006\017\007\027\010" +
    "\024\011\046\013\010\014\023\016\013\020\011\021\036" +
    "\022\025\023\033\024\006\027\050\030\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\003\156\004\034\005\044\006\017\007\027\010\024\011" +
    "\046\013\010\014\023\016\013\020\011\021\036\022\025" +
    "\023\033\024\006\027\050\030\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\161\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\003\211\004" +
    "\034\005\044\006\017\007\027\010\024\011\046\013\010" +
    "\014\023\016\013\020\011\021\036\022\025\023\033\024" +
    "\006\027\050\030\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\214\001\001\000" +
    "\002\001\001\000\044\003\216\004\034\005\044\006\017" +
    "\007\027\010\024\011\046\013\010\014\023\016\013\020" +
    "\011\021\036\022\025\023\033\024\006\027\050\030\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\231\012\226\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\245\001\001\000\044\003\253" +
    "\004\034\005\044\006\017\007\027\010\024\011\046\013" +
    "\010\014\023\016\013\020\011\021\036\022\025\023\033" +
    "\024\006\027\050\030\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\256\001\001\000\002\001\001\000\044\003\260\004\034" +
    "\005\044\006\017\007\027\010\024\011\046\013\010\014" +
    "\023\016\013\020\011\021\036\022\025\023\033\024\006" +
    "\027\050\030\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\003\302" +
    "\004\034\005\044\006\017\007\027\010\024\011\046\013" +
    "\010\014\023\016\013\020\011\021\036\022\025\023\033" +
    "\024\006\027\050\030\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\003\311\004\034\005" +
    "\044\006\017\007\027\010\024\011\046\013\010\014\023" +
    "\016\013\020\011\021\036\022\025\023\033\024\006\027" +
    "\050\030\032\001\001\000\004\017\312\001\001\000\002" +
    "\001\001\000\044\003\320\004\034\005\044\006\017\007" +
    "\027\010\024\011\046\013\010\014\023\016\013\020\011" +
    "\021\036\022\025\023\033\024\006\027\050\030\032\001" +
    "\001\000\006\011\306\012\315\001\001\000\002\001\001" +
    "\000\044\003\317\004\034\005\044\006\017\007\027\010" +
    "\024\011\046\013\010\014\023\016\013\020\011\021\036" +
    "\022\025\023\033\024\006\027\050\030\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\003\327\004\034\005\044\006\017\007\027\010\024\011" +
    "\046\013\010\014\023\016\013\020\011\021\036\022\025" +
    "\023\033\024\006\027\050\030\032\001\001\000\006\011" +
    "\306\012\324\001\001\000\002\001\001\000\044\003\326" +
    "\004\034\005\044\006\017\007\027\010\024\011\046\013" +
    "\010\014\023\016\013\020\011\021\036\022\025\023\033" +
    "\024\006\027\050\030\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\003\332\004\034" +
    "\005\044\006\017\007\027\010\024\011\046\013\010\014" +
    "\023\016\013\020\011\021\036\022\025\023\033\024\006" +
    "\027\050\030\032\001\001\000\004\017\333\001\001\000" +
    "\002\001\001\000\044\003\336\004\034\005\044\006\017" +
    "\007\027\010\024\011\046\013\010\014\023\016\013\020" +
    "\011\021\036\022\025\023\033\024\006\027\050\030\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\003\341\004\034\005\044\006\017\007\027" +
    "\010\024\011\046\013\010\014\023\016\013\020\011\021" +
    "\036\022\025\023\033\024\006\027\050\030\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\345\001\001\000\002\001\001\000\004\011\347" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\003" +
    "\352\004\034\005\044\006\017\007\027\010\024\011\046" +
    "\013\010\014\023\016\013\020\011\021\036\022\025\023" +
    "\033\024\006\027\050\030\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\356\001" +
    "\001\000\002\001\001\000\044\003\360\004\034\005\044" +
    "\006\017\007\027\010\024\011\046\013\010\014\023\016" +
    "\013\020\011\021\036\022\025\023\033\024\006\027\050" +
    "\030\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\374" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\306\012" +
    "\u0106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador_sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador_sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador_sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static String errorR;
    public static String errorNR;
    public static String inicio;
    public static String segundo="";
    public static String segundos;
    public static int contadorGroup = 0;
    public static String varias = "";
    public static int contadorim = 0;
    public static int contadorimL = 0;
    public static int contadorvar = 0;
    public static int contadorCan = 0;
    public static int contadorpar = 0;
    public static int contadorder = 0;
    public static int contadorDeclaraciones= 0;
    public static int contadorAsig =0;
    public static ArrayList<String> varsss = new ArrayList<String>();
    public static ArrayList<String> operationA = new ArrayList<String>();
    public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis en: " + " Linea "+(s.right)+" columna "+(s.left) + " No se esperaba un " + s.value );
        errorNR+="<tr><td>Recuperable</td><td>"+(s.right)+"</td><td>"+(s.left)+"</td><td>"+ s.value +"</td></tr>";
        System.out.println(errorNR);
        leerErrores();
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
       System.out.println("Error NR de sintaxis en: " + " Linea "+(s.right)+" columna "+(s.left) + " No se esperaba un " + s.value );
       errorNR+="<tr><td>No recuperable</td><td>"+(s.right)+"</td><td>"+(s.left)+"</td><td>"+ s.value +"</td></tr>";
       System.out.println(errorNR);
       leerErrores();
    }
    public String codigoTraducido="";
    
    public void leerErrores(){
        String inicio =" <!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><link rel=\"stylesheet\" href=\"main4.css\" type=\"text/css\" /<title>Reporte HTML</title></head><body><ul><li class=\"Titulo\">Julio Estuardo Solorzano Sosa</a></li><li class=\"subtitulo\">Proyecto 1 OLC1</li></ul><div>";
        String segundos= "<table align=\"center\"><tr><td class=\"precio\"  colspan=\"4\">Errores Sintacticos</td></tr><tr><td>Tipo</td><td>Linea</td><td>Columna</td><td>No se esperaba</td></tr>";
        String ends = "</table><table class=\"precio\" align=\"center\"></div></body></html>";
        try{
            PrintWriter writer = new PrintWriter("ReporteSintactico.html");
            writer.println(inicio);
            writer.println(segundos);
            writer.println(errorR);
            writer.println(errorNR);
            writer.println(ends);
            writer.println("");
            writer.close();
            }catch (Exception e) {
                System.out.println("Error");
            }
    }
    public void escribirPy(){
        String fileName = "SalidaTraducida.py";
        try{
            PrintWriter writer = new PrintWriter(fileName);
            writer.println("def main():");
            writer.println(codigoTraducido);
            writer.println("");
            writer.println("");
            writer.println("if _name_ == '_main_':");
            writer.println("\tmain()");
            writer.println("");
            writer.close();
        }catch (Exception e){
            System.out.println("Error");
          }
    }
    
    public void graficar(){
        String Dott = """
                      digraph G {
                        graph[nodesep="0.75"]label="Arbol Sintactico";
                        node [shape=box];
                        rankdir = "TB"
                        g[label="Global" width=2];
                        pri[label="prinicio"  width = 2];
                        ins[label="Instrucciones" width = 2];
                        prf[label="prfinal"  width = 2];
                        in[label="Instruccion", width = 2];
                        im[label="impresion", width = 2];
                        de[label="declaracion",width =2];
                        asg[label="asignacion", width=2];
                        impLn0[label="imprimir_nl",width =2];
                        impN0[label="imprimir",width =2];
                        parIz0[label="Parentesis izq"];
                        caden0[label="cadena", width =2];
                        parDe0[label="Parentesis der"];
                        varia0[label="variable", width =2];
                        puncoma0[label="puntoycoma",width =2];
                        ing0[label="prIngresar", width=2];
                        idnt0[label="id", width=2];
                        pcomo0[label="prcomo",width=2];
                        prtp0[label="tipodedato",width=2];
                        prconv0[label="prconvalor",width=2];
                        exp0[label="expresion",width=2];
                        pyc0[label="puntoycoma",width=2];
                        ids0[label="id",width=2];
                        simas0[label="simAsignacion",width=2];
                        exps0[label="expresion",width=2];
                        pycs0[label="puntoycoma",width=2];
                        g -> ins;
                        g -> prf;
                        g -> pri;
                        ins -> in;
                        in -> im;
                        in -> de;
                        in -> asg;
                        de -> ing0;
                        de -> idnt0;
                        de -> pcomo0;
                        de -> prtp0;
                        de -> prconv0;
                        de -> exp0;
                        de ->pyc0;
                        im -> impLn0;
                        im -> impN0;
                        im -> varia0;
                        im -> caden0;
                        im -> puncoma0;
                        im -> parIz0;
                        im -> parDe0;
                        asg -> ids0;
                        asg -> simas0;
                        asg -> exps0;
                        asg -> pycs0;
                      """;
        String finalDot = "}";
        try{
            PrintWriter writer = new PrintWriter("arbol.dot");
            writer.println(Dott);
            writer.println(segundo);
            writer.println(finalDot);
            writer.close();
            System.out.println("Finalizo");
            }catch (Exception e) {
                System.out.println("Error");
            }
    }
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analizador_sintactico$actions {
  private final Analizador_sintactico parser;

  /** Constructor */
  CUP$Analizador_sintactico$actions(Analizador_sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analizador_sintactico$do_action_part00000000(
    int                        CUP$Analizador_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_sintactico$parser,
    java.util.Stack            CUP$Analizador_sintactico$stack,
    int                        CUP$Analizador_sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador_sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Analizador_sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador_sintactico$parser.done_parsing();
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= prInicio E prFin 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 System.out.println(codigoTraducido);
    segundo+= "pri1"+"[label=\""+e+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"pri"+ "->" +"pri1"+ "\n;";
    segundo+= "prf1"+"[label=\""+a+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"prf"+ "->" +"prf1"+ "\n;";
    graficar();
    escribirPy();

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // E ::= I E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT = a; RESULT = b;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // E ::= I 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT = a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("E",1, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // I ::= declaracion 
            {
              Object RESULT =null;
		int declaleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int declaright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object decla = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT = decla;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // I ::= asignaciones 
            {
              Object RESULT =null;
		int asgnleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int asgnright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object asgn = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT = asgn; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // I ::= If 
            {
              Object RESULT =null;
		int iffleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int iffright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object iff = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT = iff;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // I ::= comentarios 
            {
              Object RESULT =null;
		int comentsleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int comentsright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object coments = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT = coments; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // I ::= operaciones 
            {
              Object RESULT =null;
		int opsleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int opsright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object ops = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT = ops; 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // I ::= Clmientras 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // I ::= clpara 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // I ::= rep 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // I ::= retur 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // I ::= metodo 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // I ::= function 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // I ::= ejecutar 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // I ::= multuple 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // I ::= Imprimir 
            {
              Object RESULT =null;
		int impaleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int imparight = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object impa = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT = impa;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // I ::= error I 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("I",4, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipodato ::= prnumero 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("tipodato",19, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipodato ::= prCadena 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("tipodato",19, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipodato ::= prCaracter 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("tipodato",19, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipodato ::= prBoolean 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("tipodato",19, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipodedatogrup ::= id prnumero 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("tipodedatogrup",20, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipodedatogrup ::= id prCadena 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("tipodedatogrup",20, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipodedatogrup ::= id prCaracter 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("tipodedatogrup",20, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tipodedatogrup ::= id prBoolean 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("tipodedatogrup",20, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tipodedatogrup ::= tipodedatogrup coma id prnumero 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("tipodedatogrup",20, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipodedatogrup ::= tipodedatogrup coma id prCadena 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("tipodedatogrup",20, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipodedatogrup ::= tipodedatogrup coma id prCaracter 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("tipodedatogrup",20, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipodedatogrup ::= tipodedatogrup coma id prBoolean 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("tipodedatogrup",20, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaracion ::= prIngresar ident prcomo prnumero prConValor operaciones puntoYComa 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int Dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int Fleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int Fright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object F = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int Gleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int Gright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object G = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                for(int i=0;i<varsss.size();i++){
                    codigoTraducido += "\t"+varsss.get(i) + "=" +F +"\n";
                    segundo+= "ing"+(contadorDeclaraciones+1)+"[label=\""+A+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"ing"+contadorDeclaraciones+ "-> ing"+(contadorDeclaraciones+1)+";\n";
                    segundo+= "idnt"+(contadorDeclaraciones+1)+"[label=\""+varsss.get(i)+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"idnt"+contadorDeclaraciones+ "-> idnt"+(contadorDeclaraciones+1)+";\n";
                    segundo+= "pcomo"+(contadorDeclaraciones+1)+"[label=\""+C+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"pcomo"+contadorDeclaraciones+ "-> pcomo"+(contadorDeclaraciones+1)+";\n";
                    segundo+= "prtp"+(contadorDeclaraciones+1)+"[label=\""+D+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"prtp"+contadorDeclaraciones +"-> prtp"+(contadorDeclaraciones+1)+";\n";
                    segundo+= "prconv"+(contadorDeclaraciones+1)+"[label=\""+E+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"prconv"+contadorDeclaraciones+ "-> prconv"+(contadorDeclaraciones+1)+";\n";
                    segundo+= "exp"+(contadorDeclaraciones+1)+"[label=\""+F+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"exp"+contadorDeclaraciones +"-> exp"+(contadorDeclaraciones+1)+";\n";
                    segundo+= "pyc"+(contadorDeclaraciones+1)+"[label=\""+G+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"pyc"+contadorDeclaraciones +"-> pyc"+(contadorDeclaraciones+1)+";\n";
                    contadorDeclaraciones +=1;
                }
                varsss.clear();
            
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declaracion ::= prIngresar ident prcomo prCadena prConValor cadena puntoYComa 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int Dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int Gleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int Gright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object G = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 
                for(int i=0;i<varsss.size();i++){
                    codigoTraducido += "\t"+varsss.get(i) + "=" +b +"\n";
                    segundo+= "ing"+(contadorDeclaraciones+1)+"[label=\""+A+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"ing"+contadorDeclaraciones+ "-> ing"+(contadorDeclaraciones+1)+";\n";
                    segundo+= "idnt"+(contadorDeclaraciones+1)+"[label=\""+varsss.get(i)+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"idnt"+contadorDeclaraciones+ "-> idnt"+(contadorDeclaraciones+1)+";\n";
                    segundo+= "pcomo"+(contadorDeclaraciones+1)+"[label=\""+C+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"pcomo"+contadorDeclaraciones+ "-> pcomo"+(contadorDeclaraciones+1)+";\n";
                    segundo+= "prtp"+(contadorDeclaraciones+1)+"[label=\""+D+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"prtp"+contadorDeclaraciones +"-> prtp"+(contadorDeclaraciones+1)+";\n";
                    segundo+= "prconv"+(contadorDeclaraciones+1)+"[label=\""+E+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"prconv"+contadorDeclaraciones+ "-> prconv"+(contadorDeclaraciones+1)+";\n";
                    segundo+= "exp"+(contadorDeclaraciones+1)+"[label="+b+", width = 2, group="+(contadorGroup+1)+ "]\n"+"exp"+contadorDeclaraciones +"-> exp"+(contadorDeclaraciones+1)+";\n";
                    segundo+= "pyc"+(contadorDeclaraciones+1)+"[label=\""+G+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"pyc"+contadorDeclaraciones+ "-> pyc"+(contadorDeclaraciones+1)+";\n";
                    contadorDeclaraciones +=1;
                }
                varsss.clear();
            
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaracion ::= prIngresar ident prcomo prCaracter prConValor caracter puntoYComa 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int Dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int Gleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int Gright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object G = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                for(int i=0;i<varsss.size();i++){
                    codigoTraducido += "\t"+varsss.get(i) + "=" +c +"\n";
                    segundo+= "ing"+(contadorDeclaraciones+1)+"[label=\""+A+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"ing"+contadorDeclaraciones+ "-> ing"+(contadorDeclaraciones+1)+";\n";
                    segundo+= "idnt"+(contadorDeclaraciones+1)+"[label=\""+varsss.get(i)+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"idnt"+contadorDeclaraciones+ "-> idnt"+(contadorDeclaraciones+1)+";\n";
                    segundo+= "pcomo"+(contadorDeclaraciones+1)+"[label=\""+C+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"pcomo"+contadorDeclaraciones+ "-> pcomo"+(contadorDeclaraciones+1)+";\n";
                    segundo+= "prtp"+(contadorDeclaraciones+1)+"[label=\""+D+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"prtp"+contadorDeclaraciones+"-> prtp"+(contadorDeclaraciones+1)+";\n";
                    segundo+= "prconv"+(contadorDeclaraciones+1)+"[label=\""+E+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"prconv"+contadorDeclaraciones+ "-> prconv"+(contadorDeclaraciones+1)+";\n";
                    segundo+= "exp"+(contadorDeclaraciones+1)+"[label=\""+c+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"exp"+contadorDeclaraciones+ "-> exp"+(contadorDeclaraciones+1)+";\n";
                    segundo+= "pyc"+(contadorDeclaraciones+1)+"[label=\""+G+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"pyc"+contadorDeclaraciones+ "-> pyc"+(contadorDeclaraciones+1)+";\n";
                    contadorDeclaraciones +=1;
                }
                varsss.clear();
            
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaracion ::= prIngresar ident prcomo prBoolean prConValor BoleanVerdadero puntoYComa 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int Dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int Gleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int Gright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object G = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                for(int i=0;i<varsss.size();i++){
                    codigoTraducido += "\t"+varsss.get(i) + "=" +d +"\n";
                    segundo+= "ing"+(contadorDeclaraciones+1)+"[label=\""+A+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"ing"+contadorDeclaraciones+ "-> ing"+(contadorDeclaraciones+1)+";\n";
                    segundo+= "idnt"+(contadorDeclaraciones+1)+"[label=\""+varsss.get(i)+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"idnt"+contadorDeclaraciones+ "-> idnt"+(contadorDeclaraciones+1)+";\n";
                    segundo+= "pcomo"+(contadorDeclaraciones+1)+"[label=\""+C+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"pcomo"+contadorDeclaraciones+ "-> pcomo"+(contadorDeclaraciones+1)+";\n";
                    segundo+= "prtp"+(contadorDeclaraciones+1)+"[label=\""+D+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"prtp"+contadorDeclaraciones +"-> prtp"+(contadorDeclaraciones+1)+";\n";
                    segundo+= "prconv"+(contadorDeclaraciones+1)+"[label=\""+E+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"prconv"+contadorDeclaraciones+ "-> prconv"+(contadorDeclaraciones+1)+";\n";
                    segundo+= "exp"+(contadorDeclaraciones+1)+"[label=\""+d+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"exp"+contadorDeclaraciones+ "-> exp"+(contadorDeclaraciones+1)+";\n";
                    segundo+= "pyc"+(contadorDeclaraciones+1)+"[label=\""+G+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"pyc"+contadorDeclaraciones+ "-> pyc"+(contadorDeclaraciones+1)+";\n";
                    contadorDeclaraciones +=1;
                }
                varsss.clear();
            
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declaracion ::= prIngresar ident prcomo prBoolean prConValor BoleanFalso puntoYComa 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int Dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int Gleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int Gright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object G = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                for(int i=0;i<varsss.size();i++){
                    codigoTraducido += "\t"+varsss.get(i) + "=" +e +"\n";
                    segundo+= "ing"+(contadorDeclaraciones+1)+"[label=\""+A+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"ing"+contadorDeclaraciones+ "-> ing"+(contadorDeclaraciones+1)+";\n";
                    segundo+= "idnt"+(contadorDeclaraciones+1)+"[label=\""+varsss.get(i)+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"idnt"+contadorDeclaraciones+ "-> idnt"+(contadorDeclaraciones+1)+";\n";
                    segundo+= "pcomo"+(contadorDeclaraciones+1)+"[label=\""+C+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"pcomo"+contadorDeclaraciones+ "-> pcomo"+(contadorDeclaraciones+1)+";\n";
                    segundo+= "prtp"+(contadorDeclaraciones+1)+"[label=\""+D+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"prtp"+contadorDeclaraciones+ "-> prtp"+(contadorDeclaraciones+1)+";\n";
                    segundo+= "prconv"+(contadorDeclaraciones+1)+"[label=\""+E+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"prconv"+contadorDeclaraciones+ "-> prconv"+(contadorDeclaraciones+1)+";\n";
                    segundo+= "exp"+(contadorDeclaraciones+1)+"[label=\""+e+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"exp"+contadorDeclaraciones+ "-> exp"+(contadorDeclaraciones+1)+";\n";
                    segundo+= "pyc"+(contadorDeclaraciones+1)+"[label=\""+G+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"pyc"+contadorDeclaraciones+ "-> pyc"+(contadorDeclaraciones+1)+";\n";
                    contadorDeclaraciones +=1;
                }
                varsss.clear();
            
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declaracion ::= prIngresar ident prcomo prBoolean prConValor relacional puntoYComa 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int Dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int Gleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int Gright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object G = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                for(int i=0;i<varsss.size();i++){
                    codigoTraducido += "\t"+varsss.get(i) + "=" +f +"\n";
                    segundo+= "ing"+(contadorDeclaraciones+1)+"[label=\""+A+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"ing"+contadorDeclaraciones+ "-> ing"+(contadorDeclaraciones+1)+";\n";
                    segundo+= "idnt"+(contadorDeclaraciones+1)+"[label=\""+varsss.get(i)+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"idnt"+contadorDeclaraciones+ "-> idnt"+(contadorDeclaraciones+1)+";\n";
                    segundo+= "pcomo"+(contadorDeclaraciones+1)+"[label=\""+C+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"pcomo"+contadorDeclaraciones+ "-> pcomo"+(contadorDeclaraciones+1)+";\n";
                    segundo+= "prtp"+(contadorDeclaraciones+1)+"[label=\""+D+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"prtp"+contadorDeclaraciones+ "-> prtp"+(contadorDeclaraciones+1)+";\n";
                    segundo+= "prconv"+(contadorDeclaraciones+1)+"[label=\""+E+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"prconv"+contadorDeclaraciones+ "-> prconv"+(contadorDeclaraciones+1)+";\n";
                    segundo+= "exp"+(contadorDeclaraciones+1)+"[label=\""+f+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"exp"+contadorDeclaraciones+ "-> exp"+(contadorDeclaraciones+1)+";\n";
                    segundo+= "pyc"+(contadorDeclaraciones+1)+"[label=\""+G+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"pyc"+contadorDeclaraciones+ "-> pyc"+(contadorDeclaraciones+1)+";\n";
                    contadorDeclaraciones +=1;
                }
                varsss.clear();
                
            
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ident ::= ident coma id 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 varsss.add(a);
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ident",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ident ::= id 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 varsss.add(b); 
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ident",5, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // comentarios ::= comenta 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 a = a.replace("/", ""); codigoTraducido += "#"+a+"\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("comentarios",6, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // comentarios ::= comentarioMulti 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		b = b.replace("/", ""); b= b.replace("*","");codigoTraducido += "\'\'\'"+b+"\'\'\'"+"\n";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("comentarios",6, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // asignaciones ::= ident simAsignacion cadena puntoYComa 
            {
              Object RESULT =null;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String A = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                for(int i=0;i<varsss.size();i++){
                    codigoTraducido += "\t"+varsss.get(i) + "=" +A +"\n";
                    segundo+= "ids"+(contadorAsig+1)+"[label=\""+varsss.get(i)+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"ids"+contadorAsig+ "-> ids"+(contadorAsig+1)+";\n";
                    segundo+= "simas"+(contadorAsig+1)+"[label=\""+B+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"simas"+contadorAsig+ "-> simas"+(contadorAsig+1)+";\n";
                    segundo+= "exps"+(contadorAsig+1)+"[label="+A+", width = 2, group="+(contadorGroup+1)+ "]\n"+"exps"+contadorAsig+ "-> exps"+(contadorAsig+1)+";\n";
                    segundo+= "pycs"+(contadorAsig+1)+"[label=\""+C+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"pycs"+contadorAsig+ "-> pycs"+(contadorAsig+1)+";\n";
                    contadorAsig+=1;
                }
                varsss.clear();
            
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("asignaciones",9, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // asignaciones ::= ident simAsignacion operaciones puntoYComa 
            {
              Object RESULT =null;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                for(int i=0;i<varsss.size();i++){
                    codigoTraducido += "\t"+varsss.get(i) + "=" +A +"\n";
                    segundo+= "ids"+(contadorAsig+1)+"[label=\""+varsss.get(i)+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"ids"+contadorAsig+ "-> ids"+(contadorAsig+1)+";\n";
                    segundo+= "simas"+(contadorAsig+1)+"[label=\""+B+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"simas"+contadorAsig+ "-> simas"+(contadorAsig+1)+";\n";
                    segundo+= "exps"+(contadorAsig+1)+"[label=\""+A+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"exps"+contadorAsig+ "-> exps"+(contadorAsig+1)+";\n";
                    segundo+= "pycs"+(contadorAsig+1)+"[label=\""+C+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"pycs"+contadorAsig+ "-> pycs"+(contadorAsig+1)+";\n";
                    contadorAsig+=1;
                }
                varsss.clear();
            
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("asignaciones",9, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // asignaciones ::= ident simAsignacion relacional puntoYComa 
            {
              Object RESULT =null;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                for(int i=0;i<varsss.size();i++){
                    codigoTraducido += "\t"+varsss.get(i) + "=" +A +"\n";
                    segundo+= "ids"+(contadorAsig+1)+"[label=\""+varsss.get(i)+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"ids"+contadorAsig+ "-> ids"+(contadorAsig+1)+";\n";
                    segundo+= "simas"+(contadorAsig+1)+"[label=\""+B+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"simas"+contadorAsig+ "-> simas"+(contadorAsig+1)+";\n";
                    segundo+= "exps"+(contadorAsig+1)+"[label=\""+A+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"exps"+contadorAsig+ "-> exps"+(contadorAsig+1)+";\n";
                    segundo+= "pycs"+(contadorAsig+1)+"[label=\""+C+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"pycs"+contadorAsig+ "-> pycs"+(contadorAsig+1)+";\n";
                    contadorAsig+=1;

                }
                varsss.clear();
            
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("asignaciones",9, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // asignaciones ::= ident simAsignacion caracter puntoYComa 
            {
              Object RESULT =null;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                for(int i=0;i<varsss.size();i++){
                    codigoTraducido += "\t"+varsss.get(i) + "=" +A +"\n";
                    segundo+= "ids"+(contadorAsig+1)+"[label=\""+varsss.get(i)+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"ids"+contadorAsig+ "-> ids"+(contadorAsig+1)+";\n";
                    segundo+= "simas"+(contadorAsig+1)+"[label=\""+B+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"simas"+contadorAsig+ "-> simas"+(contadorAsig+1)+";\n";
                    segundo+= "exps"+(contadorAsig+1)+"[label=\""+A+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"exps"+contadorAsig+ "-> exps"+(contadorAsig+1)+";\n";
                    segundo+= "pycs"+(contadorAsig+1)+"[label=\""+C+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"pycs"+contadorAsig+ "-> pycs"+(contadorAsig+1)+";\n";
                    contadorAsig+=1;
                }
                varsss.clear();
            
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("asignaciones",9, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // asignaciones ::= ident simAsignacion BoleanVerdadero puntoYComa 
            {
              Object RESULT =null;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                for(int i=0;i<varsss.size();i++){
                    codigoTraducido += "\t"+varsss.get(i) + "=" +A +"\n";
                    segundo+= "ids"+(contadorAsig+1)+"[label=\""+varsss.get(i)+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"ids"+contadorAsig+ "-> ids"+(contadorAsig+1)+";\n";
                    segundo+= "simas"+(contadorAsig+1)+"[label=\""+B+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"simas"+contadorAsig+ "-> simas"+(contadorAsig+1)+";\n";
                    segundo+= "exps"+(contadorAsig+1)+"[label=\""+A+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"exps"+contadorAsig+ "-> exps"+(contadorAsig+1)+";\n";
                    segundo+= "pycs"+(contadorAsig+1)+"[label=\""+C+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"pycs"+contadorAsig+ "-> pycs"+(contadorAsig+1)+";\n";
                    contadorAsig+=1;
                }
                varsss.clear();
            
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("asignaciones",9, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // asignaciones ::= ident simAsignacion BoleanFalso puntoYComa 
            {
              Object RESULT =null;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		
                for(int i=0;i<varsss.size();i++){
                    codigoTraducido += "\t"+varsss.get(i) + "=" +A +"\n";
                    segundo+= "ids"+(contadorAsig+1)+"[label=\""+varsss.get(i)+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"ids"+contadorAsig+ "-> ids"+(contadorAsig+1)+";\n";
                    segundo+= "simas"+(contadorAsig+1)+"[label=\""+B+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"simas"+contadorAsig+ "-> simas"+(contadorAsig+1)+";\n";
                    segundo+= "exps"+(contadorAsig+1)+"[label=\""+A+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"exps"+contadorAsig+ "-> exps"+(contadorAsig+1)+";\n";
                    segundo+= "pycs"+(contadorAsig+1)+"[label=\""+C+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"pycs"+contadorAsig+ "-> pycs"+(contadorAsig+1)+";\n";
                    contadorAsig+=1;
                }
                varsss.clear();
            
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("asignaciones",9, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Imprimir ::= primprimir id puntoYComa 
            {
              Object RESULT =null;
		int proleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int proright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object pro = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int pyccleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int pyccright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object pycc = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		codigoTraducido += "\tprint"+ "("+ a + ")" +"\n";
        RESULT += "\tprint"+ "("+ a + ")" +"\n";
        segundo+= "impN"+(contadorim+1)+"[label=\""+contadorGroup+pro+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"impN"+contadorim+ "-> impN"+(contadorim+1)+";\n";
        segundo+= "varia"+(contadorvar+1)+"[label=\""+contadorGroup+a+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"varia"+contadorvar+ "-> varia"+(contadorvar+1)+";\n";
        segundo+= "puncoma"+(contadorGroup+1)+"[label=\""+contadorGroup+pycc+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"puncoma"+contadorGroup+ "-> puncoma"+(contadorGroup+1)+";\n";
        contadorGroup +=1;
        contadorim +=1;
        contadorvar +=1;
        
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("Imprimir",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Imprimir ::= primprimirln id puntoYComa 
            {
              Object RESULT =null;
		int prl1left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int prl1right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object prl1 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int pyc2left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int pyc2right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object pyc2 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		codigoTraducido += "\tprint"+ "("+ b + ")" +"\n";
        RESULT += "\tprint"+ "("+ b + ")" +"\n";
        segundo+= "impLn"+(contadorimL+1)+"[label=\""+contadorGroup+prl1+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"impLn"+contadorimL+ "-> impLn"+(contadorimL+1)+";\n";
        segundo+= "varia"+(contadorvar+1)+"[label=\""+contadorGroup+b+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"varia"+contadorvar+ "-> varia"+(contadorvar+1)+";\n";
        segundo+= "puncoma"+(contadorGroup+1)+"[label=\""+contadorGroup+pyc2+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"puncoma"+contadorGroup+ "-> puncoma"+(contadorGroup+1)+";\n";
        contadorGroup +=1;
        contadorvar +=1;
        contadorimL+=1;
        
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("Imprimir",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Imprimir ::= primprimir cadena puntoYComa 
            {
              Object RESULT =null;
		int prl2left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int prl2right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object prl2 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int pyc3left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int pyc3right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object pyc3 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 codigoTraducido += "\tprint"+ "("+ c + ")" +"\n";
        RESULT += "\tprint"+ "("+ c + ")" +"\n"; 
        segundo+= "impN"+(contadorim+1)+"[label=\""+contadorGroup+prl2+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"impN"+contadorim+ "-> impN"+(contadorim+1)+";\n";
        segundo+= "caden"+(contadorCan+1)+"[label="+c+", width = 2, group="+(contadorGroup+1)+ "]\n"+"caden"+contadorCan+ "-> caden"+(contadorCan+1)+";\n";
        segundo+= "puncoma"+(contadorGroup+1)+"[label=\""+contadorGroup+pyc3+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"puncoma"+contadorGroup+ "-> puncoma"+(contadorGroup+1)+";\n";
        contadorGroup +=1;
        contadorim +=1; 
        contadorCan +=1;
        
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("Imprimir",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Imprimir ::= primprimirln cadena puntoYComa 
            {
              Object RESULT =null;
		int prln3left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int prln3right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object prln3 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int pyc3left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int pyc3right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object pyc3 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 codigoTraducido += "\tprint"+ "("+ d + ")" +"\n";
        RESULT += "\tprint"+ "("+ d + ")" +"\n";
        segundo+= "impLn"+(contadorimL+1)+"[label=\""+contadorGroup+prln3+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"impLn"+contadorimL+ "-> impLn"+(contadorimL+1)+";\n";
        segundo+= "caden"+(contadorCan+1)+"[label="+d+", width = 2, group="+(contadorGroup+1)+ "]\n"+"caden"+contadorCan+ "-> caden"+(contadorCan+1)+";\n";
        segundo+= "puncoma"+(contadorGroup+1)+"[label=\""+contadorGroup+pyc3+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"puncoma"+contadorGroup+ "-> puncoma"+(contadorGroup+1)+";\n";
        contadorGroup +=1;
        contadorimL +=1;
        contadorCan +=1;
        
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("Imprimir",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Imprimir ::= primprimir pare1 id pare2 puntoYComa 
            {
              Object RESULT =null;
		int prln4left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int prln4right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		Object prln4 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int par1left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int par1right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String par1 = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int par2left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int par2right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String par2 = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int pyc4left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int pyc4right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object pyc4 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		  codigoTraducido += "\tprint"+ "("+ e + ")" +"\n";
        RESULT += "\tprint"+ "("+ e + ")" +"\n";
        segundo+= "impN"+(contadorim+1)+"[label=\""+contadorGroup+prln4+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"impN"+contadorim+ "-> impN"+(contadorim+1)+";\n";
        segundo+= "parIz"+(contadorpar+1)+"[label=\""+contadorGroup+par1+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"parIz"+contadorpar+ "-> parIz"+(contadorpar+1)+";\n";
        segundo+= "varia"+(contadorvar+1)+"[label=\""+contadorGroup+e+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"varia"+contadorvar+ "-> varia"+(contadorvar+1)+";\n";
        segundo+= "parDe"+(contadorder+1)+"[label=\""+contadorGroup+par2+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"parDe"+contadorder+ "-> parDe"+(contadorder+1)+";\n";
        segundo+= "puncoma"+(contadorGroup+1)+"[label=\""+contadorGroup+pyc4+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"puncoma"+contadorGroup+ "-> puncoma"+(contadorGroup+1)+";\n";
        contadorGroup +=1;
        contadorim +=1; 
        contadorvar +=1;
        contadorpar +=1;
        contadorder +=1;
        
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("Imprimir",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Imprimir ::= primprimirln pare1 id pare2 puntoYComa 
            {
              Object RESULT =null;
		int prln5left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int prln5right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		Object prln5 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int par3left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int par3right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String par3 = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int par4left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int par4right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String par4 = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int pyc5left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int pyc5right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object pyc5 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		  codigoTraducido += "\tprint"+ "("+ f + ")" +"\n";
        RESULT += "\tprint"+ "("+ f + ")" +"\n";
        segundo+= "impLn"+(contadorimL+1)+"[label=\""+contadorGroup+prln5+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"impLn"+contadorimL+ "-> impLn"+(contadorimL+1)+";\n";
        segundo+= "parIz"+(contadorpar+1)+"[label=\""+contadorGroup+par3+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"parIz"+contadorpar+ "-> parIz"+(contadorpar+1)+";\n";
        segundo+= "varia"+(contadorvar+1)+"[label=\""+contadorGroup+f+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"varia"+contadorvar+ "-> varia"+(contadorvar+1)+";\n";
        segundo+= "parDe"+(contadorder+1)+"[label=\""+contadorGroup+par4+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"parDe"+contadorder+ "-> parDe"+(contadorder+1)+";\n";
        segundo+= "puncoma"+(contadorGroup+1)+"[label=\""+contadorGroup+pyc5+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"puncoma"+contadorGroup+ "-> puncoma"+(contadorGroup+1)+";\n";
        contadorGroup +=1;
        contadorvar +=1;
        contadorimL +=1;
        contadorpar +=1;
        contadorder +=1;
        
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("Imprimir",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Imprimir ::= primprimir pare1 cadena pare2 puntoYComa 
            {
              Object RESULT =null;
		int prln6left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int prln6right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		Object prln6 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int par5left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int par5right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String par5 = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int par6left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int par6right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String par6 = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int pyc6left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int pyc6right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object pyc6 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 codigoTraducido += "\tprint"+ "("+ g + ")" +"\n";
        RESULT += "\tprint"+ "("+ g + ")" +"\n";
        segundo+= "impN"+(contadorim+1)+"[label=\""+contadorGroup+prln6+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"impN"+contadorim+ "-> impN"+(contadorim+1)+";\n";
        segundo+= "parIz"+(contadorpar+1)+"[label=\""+contadorGroup+par5+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"parIz"+contadorpar+ "-> parIz"+(contadorpar+1)+";\n";
        segundo+= "caden"+(contadorCan+1)+"[label="+g+", width = 2, group="+(contadorGroup+1)+ "]\n"+"caden"+contadorCan+ "-> caden"+(contadorCan+1)+";\n";
        segundo+= "parDe"+(contadorder+1)+"[label=\""+contadorGroup+par6+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"parDe"+contadorder+ "-> parDe"+(contadorder+1)+";\n";
        segundo+= "puncoma"+(contadorGroup+1)+"[label=\""+contadorGroup+pyc6+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"puncoma"+contadorGroup+ "-> puncoma"+(contadorGroup+1)+";\n";
        contadorGroup +=1;
        contadorim +=1; 
        contadorCan +=1;
        contadorpar +=1;
        contadorder +=1;
        
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("Imprimir",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Imprimir ::= primprimirln pare1 cadena pare2 puntoYComa 
            {
              Object RESULT =null;
		int prln7left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).left;
		int prln7right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).right;
		Object prln7 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)).value;
		int par7left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int par7right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		String par7 = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int par8left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int par8right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		String par8 = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		int pyc7left = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int pyc7right = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object pyc7 = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		 codigoTraducido += "\tprint"+ "("+ h + ")" +"\n";
        RESULT += "\tprint"+ "("+ h + ")" +"\n";
        segundo+= "impLn"+(contadorimL+1)+"[label=\""+contadorGroup+prln7+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"impLn"+contadorimL+ "-> impLn"+(contadorimL+1)+";\n";
        segundo+= "parIz"+(contadorpar+1)+"[label=\""+contadorGroup+par7+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"parIz"+contadorpar+ "-> parIz"+(contadorpar+1)+";\n";
        segundo+= "caden"+(contadorCan+1)+"[label="+h+", width = 2, group="+(contadorGroup+1)+ "]\n"+"caden"+contadorCan+ "-> caden"+(contadorCan+1)+";\n";
        segundo+= "parDe"+(contadorder+1)+"[label=\""+contadorGroup+par8+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"parDe"+contadorder+ "-> parDe"+(contadorder+1)+";\n";
        segundo+= "puncoma"+(contadorGroup+1)+"[label=\""+contadorGroup+pyc7+"\", width = 2, group="+(contadorGroup+1)+ "]\n"+"puncoma"+contadorGroup+ "-> puncoma"+(contadorGroup+1)+";\n";
        contadorGroup +=1;
        contadorimL +=1;
        contadorCan +=1;
        contadorpar +=1;
        contadorder +=1;
        
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("Imprimir",2, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // operaciones ::= operaciones trest operaciones 
            {
              Object RESULT =null;
		int Sleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object S = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int Rleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object R = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT = S + "-" +R;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // operaciones ::= operaciones tsum operaciones 
            {
              Object RESULT =null;
		int Sleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object S = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int Rleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object R = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT = S + "+" +R;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // operaciones ::= operaciones tdiv operaciones 
            {
              Object RESULT =null;
		int Sleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object S = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int Rleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object R = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT = S + "/" +R;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // operaciones ::= operaciones tmul operaciones 
            {
              Object RESULT =null;
		int Sleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object S = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int Rleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object R = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT = S + "*" +R;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // operaciones ::= operaciones tpot operaciones 
            {
              Object RESULT =null;
		int Sleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object S = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int Rleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object R = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT = S + "**" +R;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // operaciones ::= operaciones tmod operaciones 
            {
              Object RESULT =null;
		int Sleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object S = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int Rleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object R = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT = S + "%" +R;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // operaciones ::= pare1 operaciones pare2 
            {
              Object RESULT =null;
		int Sleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object S = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		RESULT ="("+S+")";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // operaciones ::= cor1 operaciones cor2 
            {
              Object RESULT =null;
		int Sleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object S = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		RESULT = "[" + S +"]";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // operaciones ::= pare1 relacional pare2 
            {
              Object RESULT =null;
		int Sleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object S = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		RESULT = "(" + S +")";
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // operaciones ::= digito 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT = a;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // operaciones ::= id 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("operaciones",7, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // relacional ::= operaciones tmayor operaciones 
            {
              Object RESULT =null;
		int Sleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object S = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int Rleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object R = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT = S + ">" +R;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("relacional",8, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // relacional ::= operaciones tmenor operaciones 
            {
              Object RESULT =null;
		int Sleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object S = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int Rleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object R = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT = S + "<" +R;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("relacional",8, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // relacional ::= operaciones tmayorigual operaciones 
            {
              Object RESULT =null;
		int Sleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object S = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int Rleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object R = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT = S + ">=" +R;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("relacional",8, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // relacional ::= operaciones tmenorigual operaciones 
            {
              Object RESULT =null;
		int Sleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object S = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int Rleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object R = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT = S + "<=" +R;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("relacional",8, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // relacional ::= operaciones tigual operaciones 
            {
              Object RESULT =null;
		int Sleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object S = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int Rleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object R = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT = S + "==" +R;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("relacional",8, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // relacional ::= operaciones tdiferente operaciones 
            {
              Object RESULT =null;
		int Sleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object S = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int Rleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object R = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT = S + "!=" +R;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("relacional",8, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // logico ::= prnot operaciones 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT = "not" + A;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("logico",11, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // logico ::= operaciones pror operaciones 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT =A+ "or" + B;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("logico",11, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // logico ::= operaciones prand operaciones 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.peek()).value;
		RESULT = A+"and" + B;
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("logico",11, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Clmientras ::= prmientras logico prhacer E prfinmientras 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("Clmientras",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Clmientras ::= prmientras logico prhacer prfinmientras 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("Clmientras",10, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OsiRep ::= prosi relacional prentonces E 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OsiRep",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OsiRep ::= OsiRep prosi relacional prentonces E 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("OsiRep",13, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // If ::= prsi relacional prentonces E prfinsi 
            {
              Object RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-1)).value;
		
        codigoTraducido += "if" + "(" + A +"):"+"\n"+B;
    
              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("If",12, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // If ::= prsi relacional prentonces E prdelocontrario E prfinsi 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("If",12, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // If ::= prsi relacional prentonces E OsiRep prdelocontrario E prfinsi 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("If",12, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // If ::= prsi id prentonces E prdelocontrario E prfinsi 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("If",12, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // If ::= prsi id prentonces E OsiRep prdelocontrario E prfinsi 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("If",12, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // clpara ::= prpara id simAsignacion operaciones prhasta operaciones prhacer E prfinpara 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("clpara",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // clpara ::= prpara id simAsignacion operaciones prhasta operaciones prhacer prfinpara 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("clpara",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // clpara ::= prpara id simAsignacion operaciones prhasta operaciones prcon princremental operaciones prhacer E prfinpara 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("clpara",14, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // multuple ::= prsegun id prhacer multipleRep prdelocontrario prentonces E prfinsegun 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("multuple",22, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // multuple ::= prsegun id prhacer multipleRep prfinsegun 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("multuple",22, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // multipleRep ::= prinzq digito prinder prentonces E 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("multipleRep",23, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // multipleRep ::= multipleRep prinzq digito prinder prentonces E 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("multipleRep",23, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // rep ::= prrepetir E prhastaque operaciones 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("rep",15, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // rep ::= prrepetir E prhastaque logico 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("rep",15, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // rep ::= prrepetir E prhastaque relacional 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("rep",15, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // rep ::= prrepetir prhastaque operaciones 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("rep",15, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // rep ::= prrepetir prhastaque logico 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("rep",15, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // rep ::= prrepetir prhastaque relacional 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("rep",15, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // retur ::= prretornar operaciones puntoYComa 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("retur",16, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // retur ::= prretornar relacional puntoYComa 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("retur",16, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // retur ::= prretornar logico puntoYComa 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("retur",16, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // metodo ::= prmetodo id E prfinmetodo 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("metodo",17, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // metodo ::= prmetodo id prconparametros pare1 tipodedatogrup pare2 E prfinmetodo 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("metodo",17, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // function ::= prfuncion id tipodato E prfinfuncion 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("function",18, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // function ::= prfuncion id tipodato prconparametros pare1 tipodedatogrup pare2 E prfinfuncion 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("function",18, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ejecutar ::= prejecutar id pare1 pare2 puntoYComa 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ejecutar",21, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ejecutar ::= prejecutar id pare1 tipodedatogrup pare2 puntoYComa 
            {
              Object RESULT =null;

              CUP$Analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ejecutar",21, ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.elementAt(CUP$Analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analizador_sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analizador_sintactico$do_action(
    int                        CUP$Analizador_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_sintactico$parser,
    java.util.Stack            CUP$Analizador_sintactico$stack,
    int                        CUP$Analizador_sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Analizador_sintactico$do_action_part00000000(
                               CUP$Analizador_sintactico$act_num,
                               CUP$Analizador_sintactico$parser,
                               CUP$Analizador_sintactico$stack,
                               CUP$Analizador_sintactico$top);
    }
}

}

inicio
    imprimir_nl _encabezado1_;
    imprimir_nl _encabezado2_;
    imprimir  "...";
    imprimir _anio1_ ;
    imprimir _anio2_ ;
    imprimir _anio3_ ;
    imprimir _anio4_ ;
    imprimir_nl ".";
    imprimir_nl (_v3_);
    imprimir_nl (_v2_);
    @$& //errores lexicos, se tienen que recuperar!
    /////inicio de la traduccion
    /****
        Primer archivo de entrada para proyecto organizacion de lenguajes y compiladores 1
    */
    ingresaR _v1_, _v2_, _v3_ cOmo CadenA con_vAlor "esta es una cadena";
    ingresaR _curso1_         cOmo cadena con_vAlor "olc";
    ingresaR _curso2_         cOmo cadena con_vAlor "olc";
    ingresar _encabezado1_    como cadena con_valor "Universidad San Carlos de Guatemala...;";
    ingresar _encabezado2_    como cadena con_valor "Escuela de Ciencias y Sistemas Segundo semestre";
    ingresar _flag1_          como boolean  con_valor verdadero;
    ingresar _flag2_          como boolean  con_valor falso;
    ingresar _name1_          como caracter con_valor 'f';
    ingresar _name2_          como caracter con_valor 'e';
    Ingresar _variable1_      coMo NumEro cOn_valor 5;
    Ingresar _variable2_      coMo NumEro cOn_valor 50;
    ingresar _operaciones1Basica_      como numero con_valor 1+(1);               //2 el resultado
    ingresar _operaciones1Basica2_      como numero con_valor _operaciones1Basica_+_operaciones1Basica_;                
    ingresar _operaciones1Intermedia_  Como nUmero con_valor 15+(9*8)+200/8*3+9;  //171 el resultado
    ingresar _operaciones1Avanzadas1_  ComO numeRo con_valor ((15+9)*8+200/8*3+9);   //291 el resultado
    ingresar _operaciones1Avanzadas2_  coMo numero con_valor 30 potencia [22.2-2.2] + (2);   
    ingresar _operaciones1Avanzadas3_  como nuMero con_valor (30 potencia [2]) + (2);   
    ingresar _operaciones1Avanzadas4_  Como numeRo con_valor (30 potencia [10-8+9-4*2-1]) + (2) ;  
    ingresar _operaciones1Avanzadas5_  coMo nUmero con_valor (30 potencia [10-8+9-4*2-1]) + (2) ;  
    ingresar _operaciones1Avanzadas6_  Como numeRo con_valor (5*8) mod (1+5+6);   //4 es el resultado
    ingresar _operacionRela1_ como BooleaN con_valor 5+5 mayor 5;
    ingresar _operacionRela3_ como boolean con_valor _operaciones1Basica_ mayor 8;
    ingresar _operacionRela3_ como boolean con_valor _operaciones1Basica_ menor 1;
    ingresar _operacionRela3_ como BooLean con_valor (_operaciones1Basica_+6) Mayor_o_igual 8;
    ingresar _operacionRela3_ como boolean con_valor (_operaciones1Basica_+6) menor_o_igual 8;
    ingresar _operacionRela4_ como booleAn con_valor _operaciones1Basica_ es_iGual 8;
    ingresar _operacionRela5_ como boolean con_valor _operaciones1Basica_ es_igual _operaciones1Basica_;
    ingresar _operacionRela6_ como Boolean con_valor _operaciones1Basica_ es_iguAl _operaciones1Basica_+1;
    ingresar _operacionRela7_ como boolEan con_valor _operaciones1Basica_ es_igual (_operaciones1Basica_)*(8+5);
    ingresar _operacionRela5_ como bOoleAn con_valor _operaciones1Basica_ es_diferente _operaciones1Basica_;
    
    _v1_                           -> "esta es la cadena numero 1";
    _v2_, _v3_                     -> "estas cadenas deben ser diferentes";
    _curso1_ , _curso2_ ,_curso3_  -> "Organizacion de lenguajes y compiladores 1";
    _curso1_ , _curso2_ ,_curso3_  -> "Organizacion de lenguajes y compiladores 1" ; 
    _variable1_                    -> _variable1_ + 1; 
    $ //otro error lexico
    
    si _v1_ es_igual _v2_ entonces
	imprimir_nl "no tiene que imprimir este mensaje";
	imprimir "este print es un ejemplo";
        imprimir _anio3_ ;
        imprimir _anio4_ ;
        imprimir_nl ".";
        imprimir_nl (_v3_);
        imprimir_nl (_v2_);
    fin_si
fin
